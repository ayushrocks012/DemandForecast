'@Folder("Classes")
Option Explicit

'================================================================================================
' Class:       cApp
' Purpose:     Acts as the main application controller or "God Class". It owns all the
'              core components (DataManager, Engine, Reporter) and orchestrates the
'              entire forecasting process from start to finish. This centralizes the
'              application's logic and state.
' Version:     1.3
' Author:      Ayush Goyal
' Date:        22-Aug-2025
'
' Change Log:
' V1.3:        - BUGFIX: Removed the explicit "Me" keyword when calling private methods
'                within the class to resolve a "Method or data member not found"
'                compile error.
' V1.2:        - REFACTOR: Removed helper functions to call them from mUtilities.
' V1.1:        - REFACTOR: Replaced hard-coded strings with constants.
' V1.0:        - Initial creation of the application controller class.
'================================================================================================

' --- Private Core Component Objects ---
Private m_DataManager As cDataManager
Private m_CalcEngine As cCalculationEngine
Private m_Reporter As cReportGenerator

' --- Private Application State Variables ---
Private m_wbHost As Workbook
Private m_wsLog As Worksheet
Private m_lngWarningCount As Long

'================================================================================================
' 1. MAIN PUBLIC ENTRY POINT
'================================================================================================

Public Sub Run()
' This is the primary method that executes the entire forecast process.
    Dim tStart As Double: tStart = Timer
    
    ' Initialize the application environment (Excel settings, log sheet, etc.)
    ' BUGFIX: Call private methods directly without "Me"
    If Not InitializeRun() Then GoTo Main_Exit
    
    ' --- Data Loading & Processing ---
    Set m_DataManager = New cDataManager
    m_DataManager.Init m_wbHost, m_wsLog
    If Not m_DataManager.LoadAndProcessData() Then GoTo Main_Exit
    
    ' --- Main Calculation & Reporting Loop ---
    ' BUGFIX: Call private methods directly without "Me"
    ProcessAllAffiliates
    
    ' Capture the final warning count from the data manager
    m_lngWarningCount = m_DataManager.WarningCount
    
Main_Exit:
    ' Clean up and display the final status message
    ' BUGFIX: Call private methods directly without "Me"
    FinalizeRun tStart
End Sub

'================================================================================================
' 2. CORE WORKFLOW STAGES
'================================================================================================

Private Function InitializeRun() As Boolean
    Dim tCheckpoint As Double: tCheckpoint = Timer
    On Error GoTo Init_ErrorHandler
    
    ' Call utility from mUtilities
    SetupApplication
    
    Set m_wbHost = ThisWorkbook
    InitializeAllConfigs
    m_lngWarningCount = 0
    
    Application.DisplayAlerts = False
    On Error Resume Next
    m_wbHost.Sheets(SHEET_LOG).Delete
    On Error GoTo Init_ErrorHandler
    Application.DisplayAlerts = True
    
    Set m_wsLog = m_wbHost.Sheets.Add(After:=m_wbHost.Sheets(m_wbHost.Sheets.Count))
    ' Call utility from mUtilities
    InitializeLogSheet m_wsLog
    
    ' Call utility from mUtilities
    LogPerformance m_wsLog, tCheckpoint, "Initialize Environment"
    InitializeRun = True
    Exit Function

Init_ErrorHandler:
    MsgBox "A critical error occurred during initialization: " & Err.Description, vbCritical, "Initialization Failed"
    InitializeRun = False
End Function

Private Sub ProcessAllAffiliates()
    Dim varAffiliate As Variant, strAffiliate As String
    Dim lngCounter As Long, lngTotal As Long
    Dim tCheckpoint As Double: tCheckpoint = Timer
    
    ' --- Initialize Core Components ---
    Set m_CalcEngine = New cCalculationEngine
    m_CalcEngine.AffiliateDim = CALC_AFFILIATE_DIM
    m_CalcEngine.CustomerDim = CALC_CUSTOMER_DIM
    m_CalcEngine.TotalLevelDim = CALC_TOTAL_LEVEL_DIM
    m_CalcEngine.ShareLevelDim = CALC_SHARE_LEVEL_DIM
    m_CalcEngine.KeyFigureDim = CALC_KEY_FIGURE_DIM
    m_CalcEngine.Init m_DataManager.DemandDataArray, g_dsDemand.StartOfMonthsCol
    
    Set m_Reporter = New cReportGenerator
    m_Reporter.Init m_DataManager, m_wsLog, m_wbHost.Path
    
    lngTotal = m_DataManager.Affiliates.Count
    If lngTotal = 0 Then
        WriteToLog m_wsLog, ltWarning, "ProcessAllAffiliates", "No affiliates found in Demand Forecast sheet."
        Exit Sub
    End If
    
    For Each varAffiliate In m_DataManager.Affiliates.Keys
        strAffiliate = CStr(varAffiliate)
        lngCounter = lngCounter + 1
        On Error GoTo Affiliate_ErrorHandler
        
        ' --- STAGE 1: CALCULATE FOR THE ENTIRE AFFILIATE ---
        Application.StatusBar = "Calculating Forecast for " & strAffiliate & " (" & lngCounter & " of " & lngTotal & ")..."
        DoEvents
        
        WriteToLog m_wsLog, ltInfo, "ProcessAllAffiliates", "Starting Calculations for: " & strAffiliate
        
        Dim affiliateItems As Object
        ' Call utility from mUtilities
        Set affiliateItems = GetItemsForAffiliate(strAffiliate, m_DataManager.ForecastItems)

        InitializeForecastValues affiliateItems
        ComputeBaseForecasts strAffiliate, affiliateItems, m_DataManager, m_CalcEngine
        ApplySuccessorAdjustments affiliateItems
        
        WriteToLog m_wsLog, ltInfo, "ProcessAllAffiliates", "Finished Calculations for: " & strAffiliate
        
        ' --- STAGE 2: GENERATE A SEPARATE REPORT FOR EACH CUSTOMER ---
        WriteToLog m_wsLog, ltInfo, "ProcessAllAffiliates", "Starting Reporting for: " & strAffiliate
        Dim dictCustomers As Object
        ' Call utility from mUtilities
        Set dictCustomers = GetUniqueCustomersForAffiliate(strAffiliate, m_DataManager.DemandDataArray)
        
        Dim varCustomer As Variant, custCounter As Long, custTotal As Long
        custTotal = dictCustomers.Count
        custCounter = 0
        
        For Each varCustomer In dictCustomers.Keys
            custCounter = custCounter + 1
            Application.StatusBar = "Generating Report for " & strAffiliate & " - " & CStr(varCustomer) & " (" & custCounter & " of " & custTotal & ")..."
            DoEvents
            
            m_Reporter.GenerateCustomerReport strAffiliate, CStr(varCustomer)
        Next varCustomer
        
        WriteToLog m_wsLog, ltInfo, "ProcessAllAffiliates", "Finished Reporting for: " & strAffiliate
        
        GoTo Next_Affiliate
Affiliate_ErrorHandler:
        m_lngWarningCount = m_lngWarningCount + 1
        WriteToLog m_wsLog, ltError, "ProcessAllAffiliates", "Critical error processing affiliate '" & strAffiliate & "'.", Err.Number, Err.Description
        Resume Next_Affiliate
Next_Affiliate:
        On Error GoTo 0
    Next varAffiliate
    
    LogPerformance m_wsLog, tCheckpoint, "Process All Affiliates"
End Sub

Private Sub FinalizeRun(ByVal tStart As Double)
    On Error Resume Next
    
    CleanupAllConfigs
    
    Application.StatusBar = False
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.EnableEvents = True
    
    Dim strMessage As String
    strMessage = "Forecast process completed in " & Format$(Timer - tStart, "#,##0.00") & " seconds." & vbCrLf & vbCrLf
    strMessage = strMessage & "Warnings: " & m_lngWarningCount & " (see Log sheet for details)"
    
    MsgBox strMessage, IIf(m_lngWarningCount > 0, vbExclamation, vbInformation), "Forecast Update Complete"
    
    On Error GoTo 0
End Sub


'================================================================================================
' 3. FORECAST CALCULATION LOGIC
'================================================================================================

Private Sub InitializeForecastValues(ByVal dictAffiliateItems As Object)
    Dim forecastItem As cForecastItem, itemKey As Variant
    For Each itemKey In dictAffiliateItems.Keys
        Set forecastItem = dictAffiliateItems.item(itemKey)
        Set forecastItem.ForecastValues = CreateObject("Scripting.Dictionary")
    Next itemKey
End Sub

Private Sub ComputeBaseForecasts(ByVal strAffiliate As String, ByVal dictAffiliateItems As Object, ByVal dataManager As cDataManager, ByVal engine As cCalculationEngine)
    Dim forecastItem As cForecastItem, itemKey As Variant
    Dim keyFigure As Variant, varCustomer As Variant
    
    Dim dictCustomers As Object
    Set dictCustomers = GetUniqueCustomersForAffiliate(strAffiliate, dataManager.DemandDataArray)
    
    For Each itemKey In dictAffiliateItems.Keys
        Set forecastItem = dictAffiliateItems.item(itemKey)
        
        If DEBUG_MODE Then WriteToLog m_wsLog, ltInfo, "ComputeBaseForecasts", "Processing Item: " & forecastItem.DebugSummary()
        
        For Each varCustomer In dictCustomers.Keys
            For Each keyFigure In dataManager.KeyFigures.Keys
                engine.Execute forecastItem, CStr(varCustomer), CStr(keyFigure), dataManager.HistorySumCache, dataManager.DemandCache
            Next keyFigure
        Next varCustomer
            
    Next itemKey
End Sub

Private Sub ApplySuccessorAdjustments(ByVal dictAffiliateItems As Object)
    If dictAffiliateItems.Count > 0 Then
        Dim lifecycleManager As cProductLifecycle
        Set lifecycleManager = New cProductLifecycle
        lifecycleManager.ProcessSuccessorTransfers dictAffiliateItems
    End If
End Sub

'================================================================================================
' 4. CLASS DESTRUCTOR
'================================================================================================

Private Sub Class_Terminate()
    ' Clean up all object references
    Set m_DataManager = Nothing
    Set m_CalcEngine = Nothing
    Set m_Reporter = Nothing
    Set m_wbHost = Nothing
    Set m_wsLog = Nothing
End Sub
