'@Folder("Classes")
Option Explicit

'================================================================================================
' Class:       cProductLifecycle
' Purpose:     Encapsulates all business logic related to product lifecycle events
'              that involve interactions between multiple items, such as transferring
'              forecasts from a phased-out product to its successor.
' Version:     2.0
' Author:      Ayush Goyal
' Date:        22-Aug-2025
'
' Change Log:
' V2.0:        - REFACTOR: Updated LinkAndTransferSingleItem to correctly handle the new
'                customer-specific forecast keys (Customer|KeyFigure|Date). The transfer
'                logic now correctly preserves the customer dimension.
' V1.0:        - Initial creation.
'================================================================================================

' --- Public Methods ---

'---------------------------------------------------------------------------------
' Procedure : ProcessSuccessorTransfers
' Purpose   : Iterates through all forecast items for an affiliate and transfers
'             forecast values from phasing-out items to their successors.
' @param   : dictItems As Object - The dictionary of cForecastItem objects for a
'             given affiliate.
'---------------------------------------------------------------------------------
Public Sub ProcessSuccessorTransfers(ByVal dictItems As Object)
    ' Exit if the dictionary is not valid or empty
    If dictItems Is Nothing Then Exit Sub
    If dictItems.Count = 0 Then Exit Sub
    
    Dim itemKey As Variant
    Dim outgoingItem As cForecastItem
    
    ' Loop through all items for the affiliate
    For Each itemKey In dictItems.Keys
        Set outgoingItem = dictItems.item(itemKey)
        
        ' Check if the item is phasing out and has a defined successor
        If outgoingItem.IsPhasingOut And Len(outgoingItem.SupersededByProductID) > 0 Then
            LinkAndTransferSingleItem outgoingItem, dictItems
        End If
    Next itemKey
End Sub

' --- Private Helper Methods ---

'---------------------------------------------------------------------------------
' Procedure : LinkAndTransferSingleItem
' Purpose   : Finds the successor for a single item and transfers the relevant
'             forecast values for the phase-out month.
' @param   : outgoingItem As cForecastItem - The item that is being phased out.
' @param   : dictItems As Object - The dictionary of all cForecastItem objects.
'---------------------------------------------------------------------------------
Private Sub LinkAndTransferSingleItem(ByVal outgoingItem As cForecastItem, ByVal dictItems As Object)
    ' Build the key to find the successor item in the dictionary
    ' The key for the item map is still "Affiliate|ISD"
    Dim successorMapKey As String
    successorMapKey = outgoingItem.Affiliate & "|" & outgoingItem.SupersededByProductID
    
    ' Check if the successor exists in the provided collection
    If dictItems.Exists(successorMapKey) Then
        Dim successorItem As cForecastItem
        Set successorItem = dictItems.item(successorMapKey)
        
        ' Mark the successor as "phasing in" and set its properties.
        ' The phase-in percent is the inverse of the outgoing item's phase-out percent.
        successorItem.MarkAsPhasingIn outgoingItem.PhaseOutDate, (1 - outgoingItem.PhaseOutPercent)
        
        ' Transfer the forecast values for the specific phase-out month
        Dim forecastKey As Variant
        Dim forecastMonth As Date
        
        For Each forecastKey In outgoingItem.ForecastValues.Keys
            ' The forecast key is now "Customer|KeyFigure|Date"
            forecastMonth = CDate(Split(forecastKey, "|")(2))
            
            ' Only transfer values for the exact month of the phase-out
            If FirstDayOfMonth(forecastMonth) = FirstDayOfMonth(outgoingItem.PhaseOutDate) Then
                Dim originalValue As Double: originalValue = outgoingItem.ForecastValues.item(forecastKey)
                Dim multiplier As Double: multiplier = outgoingItem.GetForecastMultiplier(forecastMonth)
                Dim transferValue As Double
                
                ' The value to transfer is the portion of the forecast that is being phased out.
                If originalValue > 0 Then
                    transferValue = originalValue * (1 - multiplier)
                End If
                
                ' Add the transferred value to the successor's forecast using the SAME key
                If successorItem.ForecastValues.Exists(forecastKey) Then
                    successorItem.ForecastValues.item(forecastKey) = successorItem.ForecastValues.item(forecastKey) + transferValue
                Else
                    successorItem.ForecastValues.Add forecastKey, transferValue
                End If
            End If
        Next forecastKey
    End If
End Sub

'---------------------------------------------------------------------------------
' Procedure : FirstDayOfMonth
' Purpose   : A private helper to get the first day of the month for a given date.
'---------------------------------------------------------------------------------
Private Function FirstDayOfMonth(ByVal d As Date) As Date
    FirstDayOfMonth = DateSerial(Year(d), Month(d), 1)
End Function
