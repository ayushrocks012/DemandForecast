'@Folder("Classes")
Option Explicit

'================================================================================================
' Class:       cReportGenerator
' Purpose:     Encapsulates all logic for generating the final formatted Excel reports.
'              This class takes a fully processed data manager object and handles the
'              creation, population, and styling of the output workbook.
' Version:     2.0
' Author:      Ayush Goyal
' Date:        22-Aug-2025
'
' Change Log:
' V2.0:        - REFACTOR: Major overhaul of report generation logic to support the new
'                "Customer" dimension.
'              - FEATURE: Added new helper functions to get unique Tier/Customer combinations.
'              - REFACTOR: Restructured loops in PopulateTierSheet and PopulateSummarySheets
'                to iterate through products at the customer level.
'              - REFACTOR: Updated forecast and history lookups to use customer-specific keys.
' V1.1:        - PERFORMANCE: Replaced slow CallByName with a Select Case block.
'================================================================================================

' --- Private Member Variables (State for a single report job) ---
Private m_DataManager As cDataManager
Private m_wsLog As Worksheet
Private m_strAffiliate As String
Private m_strBasePath As String

'================================================================================================
'--- INITIALIZATION & PUBLIC METHODS ---
'================================================================================================

Public Sub Init(ByVal dataManager As cDataManager, ByVal logSheet As Worksheet, ByVal basePath As String)
    Set m_DataManager = dataManager
    Set m_wsLog = logSheet
    m_strBasePath = basePath
End Sub

Public Sub GenerateAffiliateReport(ByVal strAffiliate As String)
    m_strAffiliate = strAffiliate
    
    Dim wbReport As Workbook, ws As Worksheet
    Dim varKeyFigure As Variant, varTierCustomer As Variant
    Dim dictTiersAndCustomers As Object, dictSheetToKeyFigureMap As Object
    Set dictSheetToKeyFigureMap = CreateObject("Scripting.Dictionary")
    
    Set wbReport = Workbooks.Add
    
    For Each varKeyFigure In m_DataManager.KeyFigures.Keys
        Set ws = wbReport.Sheets.Add(Before:=wbReport.Sheets(1))
        Dim sheetName As String: sheetName = SanitizeSheetName("Summary - " & CStr(varKeyFigure))
        ws.Name = sheetName
        dictSheetToKeyFigureMap.Add sheetName, CStr(varKeyFigure)
    Next varKeyFigure
    
    Application.DisplayAlerts = False
    On Error Resume Next
    wbReport.Sheets("Sheet1").Delete
    On Error GoTo 0
    Application.DisplayAlerts = True

    Set dictTiersAndCustomers = GetUniqueTiersAndCustomersForAffiliate()
    For Each varTierCustomer In dictTiersAndCustomers.Keys
        Dim arrTierCustomer() As String: arrTierCustomer = Split(varTierCustomer, "|")
        Dim strTier As String: strTier = arrTierCustomer(0)
        Dim strCustomer As String: strCustomer = arrTierCustomer(1)
        
        Set ws = wbReport.Sheets.Add(After:=wbReport.Sheets(wbReport.Sheets.Count))
        ws.Name = SanitizeSheetName(strTier & " - " & strCustomer)
        PopulateTierSheet ws, strTier, strCustomer
        FormatTierSheet ws
    Next varTierCustomer
    
    PopulateSummarySheets wbReport, dictSheetToKeyFigureMap
    
    If Not DEBUG_MODE Then
        Application.StatusBar = "Saving final report for " & m_strAffiliate & "..."
        Dim strFilePath As String: strFilePath = GetOutputFilePath()
        
        On Error Resume Next
        wbReport.SaveAs strFilePath
        If Err.Number <> 0 Then
            WriteToLog ltError, "ReportGenerator.Save", "Failed to save report for " & m_strAffiliate, Err.Number, "Path: " & strFilePath
        Else
            WriteToLog ltInfo, "ReportGenerator.Save", "Report saved to " & strFilePath
        End If
        On Error GoTo 0
        
        wbReport.Close SaveChanges:=False
    End If
End Sub

'================================================================================================
'--- PRIVATE REPORT POPULATION & FORMATTING (OPTIMIZED) ---
'================================================================================================

Private Sub PopulateTierSheet(ByVal ws As Worksheet, ByVal strTier As String, ByVal strCustomer As String)
    Dim arrOutput() As Variant, arrHeader() As Variant, colProducts As Collection
    Dim monthIndex As Long, colIndex As Long, staticColCount As Long
    Dim numHistMonths As Long, numFcstMonths As Long
    Dim outputRowIndex As Long, subtotalStartRow As Long
    Dim forecastItem As cForecastItem, varKeyFigure As Variant
    
    Set colProducts = GetItemsForTierAndCustomer(strTier, strCustomer)
    If colProducts.Count = 0 Then Exit Sub
    
    staticColCount = GetTierReportCols().Count
    numHistMonths = UBound(m_DataManager.HistoryDataArray, 2) - g_dsHistory.StartOfMonthsCol + 1
    numFcstMonths = UBound(m_DataManager.DemandDataArray, 2) - g_dsDemand.StartOfMonthsCol + 1
    
    ReDim arrHeader(1 To staticColCount + numHistMonths + numFcstMonths)
    For colIndex = 1 To staticColCount
        arrHeader(colIndex) = GetTierReportCols()(colIndex).HeaderText
    Next colIndex
    For monthIndex = 1 To numHistMonths
        arrHeader(staticColCount + monthIndex) = Format$(m_DataManager.HistoryDataArray(1, g_dsHistory.StartOfMonthsCol + monthIndex - 1), "mmm-yy")
    Next monthIndex
    For monthIndex = 1 To numFcstMonths
        arrHeader(staticColCount + numHistMonths + monthIndex) = Format$(m_DataManager.DemandDataArray(1, g_dsDemand.StartOfMonthsCol + monthIndex - 1), "mmm-yy")
    Next monthIndex
    
    ReDim arrOutput(1 To (colProducts.Count * m_DataManager.KeyFigures.Count) + m_DataManager.KeyFigures.Count, 1 To UBound(arrHeader))
    outputRowIndex = 1
    
    For Each varKeyFigure In m_DataManager.KeyFigures.Keys
        subtotalStartRow = outputRowIndex
        For Each forecastItem In colProducts
            ' OPTIMIZED: Use Select Case instead of slow CallByName
            For colIndex = 1 To staticColCount
                Select Case GetTierReportCols()(colIndex).SourceProperty
                    Case "KeyFigure": arrOutput(outputRowIndex, colIndex) = CStr(varKeyFigure)
                    Case "Affiliate": arrOutput(outputRowIndex, colIndex) = forecastItem.Affiliate
                    Case "Customer": arrOutput(outputRowIndex, colIndex) = strCustomer
                    Case "ForecastTier": arrOutput(outputRowIndex, colIndex) = forecastItem.ForecastTier
                    Case "ForecastSubTier": arrOutput(outputRowIndex, colIndex) = forecastItem.ForecastSubTier
                    Case "LocalItemNbr": arrOutput(outputRowIndex, colIndex) = forecastItem.LocalItemNbr
                    Case "Description": arrOutput(outputRowIndex, colIndex) = forecastItem.Description
                    Case "ISD": arrOutput(outputRowIndex, colIndex) = forecastItem.ISD
                    Case "StatusString": arrOutput(outputRowIndex, colIndex) = forecastItem.StatusString
                    Case "PhaseOutDate": arrOutput(outputRowIndex, colIndex) = forecastItem.PhaseOutDate
                End Select
            Next colIndex
            
            Dim strHistKey As String
            ' UPDATED: History key now includes the customer
            strHistKey = forecastItem.Affiliate & "|" & strCustomer & "|" & CStr(varKeyFigure) & "|" & forecastItem.LocalItemNbr
            
            For monthIndex = 1 To numHistMonths
                Dim dteHistMonth As Date: dteHistMonth = m_DataManager.HistoryDataArray(1, g_dsHistory.StartOfMonthsCol + monthIndex - 1)
                If m_DataManager.HistoryCache.Exists(strHistKey) Then
                    If m_DataManager.HistoryCache.item(strHistKey).Exists(dteHistMonth) Then
                        arrOutput(outputRowIndex, staticColCount + monthIndex) = m_DataManager.HistoryCache.item(strHistKey).item(dteHistMonth)
                    End If
                End If
            Next monthIndex
            
            For monthIndex = 1 To numFcstMonths
                Dim dteFcstMonth As Date: dteFcstMonth = m_DataManager.DemandDataArray(1, g_dsDemand.StartOfMonthsCol + monthIndex - 1)
                ' UPDATED: Forecast key now includes the customer
                Dim fcstKey As String: fcstKey = strCustomer & "|" & CStr(varKeyFigure) & "|" & dteFcstMonth
                If forecastItem.ForecastValues.Exists(fcstKey) Then
                    Dim baseValue As Double: baseValue = forecastItem.ForecastValues.item(fcstKey)
                    Dim finalValue As Double: finalValue = baseValue * forecastItem.GetForecastMultiplier(dteFcstMonth)
                    arrOutput(outputRowIndex, staticColCount + numHistMonths + monthIndex) = finalValue
                End If
            Next monthIndex
            outputRowIndex = outputRowIndex + 1
        Next forecastItem
        
        arrOutput(outputRowIndex, 1) = CStr(varKeyFigure): arrOutput(outputRowIndex, 2) = "TOTAL": arrOutput(outputRowIndex, 3) = strCustomer: arrOutput(outputRowIndex, 4) = strTier
        For colIndex = staticColCount + 1 To UBound(arrOutput, 2)
            Dim monthlyTotal As Double: monthlyTotal = 0
            Dim productRow As Long
            For productRow = subtotalStartRow To outputRowIndex - 1
                If IsNumeric(arrOutput(productRow, colIndex)) Then monthlyTotal = monthlyTotal + CDbl(arrOutput(productRow, colIndex))
            Next productRow
            arrOutput(outputRowIndex, colIndex) = monthlyTotal
        Next colIndex
        outputRowIndex = outputRowIndex + 1
    Next varKeyFigure
    
    ws.Range("A1").Resize(1, UBound(arrHeader)).Value = arrHeader
    ws.Range("A2").Resize(outputRowIndex - 1, UBound(arrHeader)).Value = arrOutput
End Sub

Private Sub FormatTierSheet(ByVal ws As Worksheet)
    Dim lastRow As Long, lastCol As Long, staticColCount As Long, histColStart As Long, fcstColStart As Long
    
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    If lastRow <= 1 Then Exit Sub
    
    staticColCount = GetTierReportCols().Count
    histColStart = staticColCount + 1
    fcstColStart = histColStart + (UBound(m_DataManager.HistoryDataArray, 2) - g_dsHistory.StartOfMonthsCol + 1)
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    
    With Union(ws.Range("A1").Resize(1, staticColCount), ws.Range(ws.Cells(1, fcstColStart), ws.Cells(1, lastCol)))
        .Font.Bold = True: .Font.Color = vbWhite: .Interior.Color = RGB(0, 32, 96): .VerticalAlignment = xlCenter
    End With
    With ws.Range(ws.Cells(1, histColStart), ws.Cells(1, fcstColStart - 1))
        .Font.Bold = True: .Font.Color = vbBlack: .Interior.Color = RGB(217, 217, 217): .VerticalAlignment = xlCenter
    End With
    
    Dim col As Long
    For col = 1 To staticColCount
        ws.Columns(col).ColumnWidth = GetTierReportCols()(col).ColumnWidth
        If Len(GetTierReportCols()(col).NumberFormat) > 0 Then ws.Columns(col).NumberFormat = GetTierReportCols()(col).NumberFormat
    Next col
    
    ws.Range(ws.Cells(2, histColStart), ws.Cells(lastRow, fcstColStart - 1)).Interior.Color = RGB(242, 242, 242)
    ws.Range(ws.Cells(2, histColStart), ws.Cells(lastRow, lastCol)).NumberFormat = "#,##0"
    
    Dim rowIndex As Long
    For rowIndex = 2 To lastRow
        If ws.Cells(rowIndex, 2).Value = "TOTAL" Then
            With ws.Range(ws.Cells(rowIndex, 1), ws.Cells(rowIndex, lastCol))
                .Font.Bold = True: .Interior.Color = RGB(220, 230, 241)
            End With
        End If
    Next rowIndex
    
    With ws.Range("A1").Resize(lastRow, lastCol).Borders
        .LineStyle = xlContinuous: .Weight = xlThin
    End With
    
    ws.Activate: ws.Rows(2).Select: ActiveWindow.FreezePanes = True: ws.Cells(1, 1).Select
End Sub

Private Sub PopulateSummarySheets(ByVal wbReport As Workbook, ByVal dictMap As Object)
    ' This function may need significant rework depending on how a "Summary" is defined
    ' in the new Customer-centric model. For now, it will list all product-customer combos.
    Dim ws As Worksheet, forecastItem As cForecastItem, arrOutput() As Variant, arrHeader() As Variant
    Dim monthIndex As Long, colIndex As Long, staticColCount As Long
    Dim numFcstMonths As Long, outputRowIndex As Long
    Dim strFullKeyFigure As String, varKey As Variant
    
    staticColCount = GetSummaryReportCols().Count
    numFcstMonths = UBound(m_DataManager.DemandDataArray, 2) - g_dsDemand.StartOfMonthsCol + 1
    
    ReDim arrHeader(1 To staticColCount + numFcstMonths)
    For colIndex = 1 To staticColCount
        arrHeader(colIndex) = GetSummaryReportCols()(colIndex).HeaderText
    Next colIndex
    For monthIndex = 1 To numFcstMonths
        arrHeader(staticColCount + monthIndex) = Format$(m_DataManager.DemandDataArray(1, g_dsDemand.StartOfMonthsCol + monthIndex - 1), "mmm-yy")
    Next monthIndex
    
    For Each ws In wbReport.Worksheets
        If dictMap.Exists(ws.Name) Then
            strFullKeyFigure = dictMap.item(ws.Name)
            ' Estimate a large enough array. A more dynamic approach might be needed for memory efficiency.
            ReDim arrOutput(1 To m_DataManager.ForecastItems.Count * 5, 1 To UBound(arrHeader)) ' Increased size estimate
            outputRowIndex = 1
            
            Dim dictCustomers As Object: Set dictCustomers = GetUniqueCustomersForAffiliate()

            For Each varKey In m_DataManager.ForecastItems.Keys
                Set forecastItem = m_DataManager.ForecastItems.item(varKey)
                If forecastItem.Affiliate = m_strAffiliate Then
                    Dim varCustomer As Variant
                    For Each varCustomer In dictCustomers.Keys
                        ' OPTIMIZED: Use Select Case instead of slow CallByName
                        For colIndex = 1 To staticColCount
                            Select Case GetSummaryReportCols()(colIndex).SourceProperty
                                Case "Affiliate": arrOutput(outputRowIndex, colIndex) = forecastItem.Affiliate
                                Case "Customer": arrOutput(outputRowIndex, colIndex) = CStr(varCustomer)
                                Case "ForecastTier": arrOutput(outputRowIndex, colIndex) = forecastItem.ForecastTier
                                Case "ForecastSubTier": arrOutput(outputRowIndex, colIndex) = forecastItem.ForecastSubTier
                                Case "LocalItemNbr": arrOutput(outputRowIndex, colIndex) = forecastItem.LocalItemNbr
                                Case "Description": arrOutput(outputRowIndex, colIndex) = forecastItem.Description
                                Case "ISD": arrOutput(outputRowIndex, colIndex) = forecastItem.ISD
                                Case "StatusString": arrOutput(outputRowIndex, colIndex) = forecastItem.StatusString
                                Case "PhaseOutDate": arrOutput(outputRowIndex, colIndex) = forecastItem.PhaseOutDate
                            End Select
                        Next colIndex
                        
                        For monthIndex = 1 To numFcstMonths
                            Dim dteFcstMonth As Date: dteFcstMonth = m_DataManager.DemandDataArray(1, g_dsDemand.StartOfMonthsCol + monthIndex - 1)
                            Dim forecastKey As String: forecastKey = CStr(varCustomer) & "|" & strFullKeyFigure & "|" & dteFcstMonth
                            If forecastItem.ForecastValues.Exists(forecastKey) Then
                                Dim baseValue As Double: baseValue = forecastItem.ForecastValues.item(forecastKey)
                                Dim finalValue As Double: finalValue = baseValue * forecastItem.GetForecastMultiplier(dteFcstMonth)
                                arrOutput(outputRowIndex, staticColCount + monthIndex) = finalValue
                            End If
                        Next monthIndex
                        outputRowIndex = outputRowIndex + 1
                    Next varCustomer
                End If
            Next varKey
            
            ws.Range("A1").Resize(1, UBound(arrHeader)).Value = arrHeader
            If outputRowIndex > 1 Then ws.Range("A2").Resize(outputRowIndex - 1, UBound(arrHeader)).Value = arrOutput
            FormatSummarySheet ws
        End If
    Next ws
End Sub

Private Sub FormatSummarySheet(ByVal ws As Worksheet)
    Dim lastRow As Long, lastCol As Long, staticColCount As Long
    
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    If lastRow <= 1 Then Exit Sub
    
    staticColCount = GetSummaryReportCols().Count
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    
    With ws.Range("A1").Resize(1, lastCol)
        .Font.Bold = True: .Font.Color = vbWhite: .Interior.Color = RGB(0, 32, 96): .VerticalAlignment = xlCenter
    End With
    
    Dim col As Long
    For col = 1 To staticColCount
        ws.Columns(col).ColumnWidth = GetSummaryReportCols()(col).ColumnWidth
        If Len(GetSummaryReportCols()(col).NumberFormat) > 0 Then ws.Columns(col).NumberFormat = GetSummaryReportCols()(col).NumberFormat
    Next col
    
    ws.Range(ws.Cells(2, staticColCount + 1), ws.Cells(lastRow, lastCol)).NumberFormat = "#,##0"
    
    With ws.Range("A1").Resize(lastRow, lastCol).Borders
        .LineStyle = xlContinuous: .Weight = xlThin
    End With
    
    ws.Activate: ws.Rows(2).Select: ActiveWindow.FreezePanes = True: ws.Cells(1, 1).Select
End Sub

'================================================================================================
'--- PRIVATE HELPERS & UTILITIES ---
'================================================================================================

Private Function GetItemsForTierAndCustomer(strTier As String, strCustomer As String) As Collection
    ' This helper finds all unique products associated with a specific Tier and Customer
    Set GetItemsForTierAndCustomer = New Collection
    Dim dictItems As Object: Set dictItems = CreateObject("Scripting.Dictionary")
    
    Dim rowIndex As Long, arrHistory As Variant: arrHistory = m_DataManager.HistoryDataArray
    
    For rowIndex = 2 To UBound(arrHistory, 1)
        If arrHistory(rowIndex, g_dsHistory.GetCol("Affiliate")) = m_strAffiliate And _
           arrHistory(rowIndex, g_dsHistory.GetCol("Tier")) = strTier And _
           arrHistory(rowIndex, g_dsHistory.GetCol("Customer")) = strCustomer Then
            
            Dim itemKey As String: itemKey = m_strAffiliate & "|" & arrHistory(rowIndex, g_dsHistory.GetCol("ISD")) ' ISD is not in history, need LocalItemNbr
            ' Correction: The link from history to a forecast item is via Affiliate and LocalItemNbr/ISD.
            ' The master list of items is in cDataManager. We need to find the ISD from the product status sheet.
            ' Let's assume for now that LocalItemNbr is unique enough within an affiliate.
            ' A better approach would be a lookup map in cDataManager.
            ' For now, we find the item in the main map.
            
            Dim forecastItemKey As String
            ' This is inefficient. This lookup should be pre-cached.
            ' For now, we will find the ISD from the LocalItemNbr.
            ' This part of the logic is complex and may need a redesign in cDataManager.
            ' We will assume a direct lookup is possible for this iteration.
            
            Dim varKey As Variant, obj As cForecastItem
            For Each varKey In m_DataManager.ForecastItems.Keys
                Set obj = m_DataManager.ForecastItems.item(varKey)
                If obj.Affiliate = m_strAffiliate And obj.LocalItemNbr = arrHistory(rowIndex, g_dsHistory.GetCol("LocalItemNbr")) Then
                    If Not dictItems.Exists(varKey) Then
                        dictItems.Add varKey, obj
                    End If
                    Exit For
                End If
            Next varKey
        End If
    Next rowIndex
    
    If dictItems.Count > 0 Then
        Dim key As Variant
        For Each key In dictItems.Keys
            GetItemsForTierAndCustomer.Add dictItems.item(key)
        Next key
    End If
End Function

Private Function GetUniqueTiersAndCustomersForAffiliate() As Object
    ' This helper gets all unique Tier|Customer combinations for the current affiliate
    Set GetUniqueTiersAndCustomersForAffiliate = CreateObject("Scripting.Dictionary")
    Dim rowIndex As Long, arrDemand As Variant: arrDemand = m_DataManager.DemandDataArray
    
    For rowIndex = 2 To UBound(arrDemand, 1)
        If arrDemand(rowIndex, g_dsDemand.GetCol("Affiliate")) = m_strAffiliate Then
            Dim strTier As String: strTier = arrDemand(rowIndex, g_dsDemand.GetCol("Tier"))
            Dim strCustomer As String: strCustomer = arrDemand(rowIndex, g_dsDemand.GetCol("Customer"))
            Dim combinedKey As String: combinedKey = strTier & "|" & strCustomer
            If Not GetUniqueTiersAndCustomersForAffiliate.Exists(combinedKey) Then
                GetUniqueTiersAndCustomersForAffiliate.Add combinedKey, 1
            End If
        End If
    Next rowIndex
End Function

Private Function GetUniqueCustomersForAffiliate() As Object
    Set GetUniqueCustomersForAffiliate = CreateObject("Scripting.Dictionary")
    Dim rowIndex As Long, arrDemand As Variant: arrDemand = m_DataManager.DemandDataArray
    For rowIndex = 2 To UBound(arrDemand, 1)
        If arrDemand(rowIndex, g_dsDemand.GetCol("Affiliate")) = m_strAffiliate Then
            Dim strCustomer As String: strCustomer = arrDemand(rowIndex, g_dsDemand.GetCol("Customer"))
            If Not GetUniqueCustomersForAffiliate.Exists(strCustomer) Then
                GetUniqueCustomersForAffiliate.Add strCustomer, 1
            End If
        End If
    Next rowIndex
End Function


Private Function SanitizeSheetName(ByVal strName As String) As String
    Dim sanitizedString As String: sanitizedString = strName
    sanitizedString = Replace(sanitizedString, "/", "-"): sanitizedString = Replace(sanitizedString, "\", "-")
    sanitizedString = Replace(sanitizedString, "?", ""): sanitizedString = Replace(sanitizedString, "*", "")
    sanitizedString = Replace(sanitizedString, "[", ""): sanitizedString = Replace(sanitizedString, "]", "")
    SanitizeSheetName = Left$(sanitizedString, 31)
End Function

Private Function GetOutputFilePath() As String
    GetOutputFilePath = m_strBasePath & "\Demand Forecast - " & m_strAffiliate & " - " & Format$(Now, "ddmmyyyy_hhmmss") & ".xlsx"
End Function

Private Sub WriteToLog(ByVal logType As logType, ByVal procedureName As String, ByVal message As String, Optional ByVal errNumber As Long = 0, Optional ByVal errContext As String = "")
    If m_wsLog Is Nothing Then Exit Sub
    Dim nextRow As Long: nextRow = m_wsLog.Cells(m_wsLog.Rows.Count, "A").End(xlUp).Row + 1
    With m_wsLog.Rows(nextRow)
        .Cells(1).Value = Now(): .Cells(2).Value = GetLogTypeString(logType)
        .Cells(3).Value = procedureName: .Cells(4).Value = message
        If errNumber <> 0 Then .Cells(5).Value = "Err " & errNumber & ": " & errContext Else .Cells(5).Value = errContext
    End With
End Sub

Private Function GetLogTypeString(ByVal logType As logType) As String
    Select Case logType
        Case ltInfo: GetLogTypeString = "Info"
        Case ltWarning: GetLogTypeString = "Warning"
        Case ltError: GetLogTypeString = "Error"
        Case ltFatal: GetLogTypeString = "FATAL"
        Case ltProfile: GetLogTypeString = "Profile"
    End Select
End Function

Private Sub Class_Terminate()
    Set m_DataManager = Nothing
    Set m_wsLog = Nothing
End Sub
