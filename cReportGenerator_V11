'@Folder("Classes")
Option Explicit

'================================================================================================
' Class:       cReportGenerator
' Purpose:     Encapsulates all logic for generating the final formatted Excel reports.
'              This class takes a fully processed data manager object and handles the
'              creation, population, and styling of the output workbook.
' Version:     3.7
' Author:      Ayush Goyal
' Date:        22-Aug-2025
'
' Change Log:
' V3.7:        - REFACTOR: Removed all general-purpose helper functions and updated the
'                class to call them from the new, centralized mUtilities module. This
'                completes the refactoring for Separation of Concerns.
' V3.6:        - REFACTOR: Replaced hard-coded strings with constants.
' V3.5:        - PERFORMANCE: Optimized the PopulateSummarySheets method.
' V3.4:        - PERFORMANCE: Implemented deferred formatting.
'================================================================================================

' --- Private Member Variables (State for a single report job) ---
Private m_DataManager As cDataManager
Private m_wsLog As Worksheet
Private m_strAffiliate As String
Private m_strCustomer As String
Private m_strBasePath As String

'================================================================================================
'--- INITIALIZATION & PUBLIC METHODS ---
'================================================================================================

Public Sub Init(ByVal dataManager As cDataManager, ByVal logSheet As Worksheet, ByVal basePath As String)
    Set m_DataManager = dataManager
    Set m_wsLog = logSheet
    m_strBasePath = basePath
End Sub

Public Sub GenerateCustomerReport(ByVal strAffiliate As String, ByVal strCustomer As String)
    m_strAffiliate = strAffiliate
    m_strCustomer = strCustomer
    
    WriteToLog m_wsLog, ltInfo, "GenerateCustomerReport", "Starting report for " & strAffiliate & " - " & strCustomer
    Dim tStart As Double: tStart = Timer
    
    Dim wbReport As Workbook, ws As Worksheet
    Dim varKeyFigure As Variant, varTier As Variant
    Dim dictTiers As Object, dictSheetToKeyFigureMap As Object
    Set dictSheetToKeyFigureMap = CreateObject("Scripting.Dictionary")
    
    Set wbReport = Workbooks.Add
    
    ' Create the Summary sheets first
    For Each varKeyFigure In m_DataManager.KeyFigures.Keys
        Set ws = wbReport.Sheets.Add(Before:=wbReport.Sheets(1))
        Dim sheetName As String: sheetName = SanitizeSheetName("Summary - " & CStr(varKeyFigure))
        ws.Name = sheetName
        dictSheetToKeyFigureMap.Add sheetName, CStr(varKeyFigure)
    Next varKeyFigure
    
    Application.DisplayAlerts = False
    On Error Resume Next
    wbReport.Sheets("Sheet1").Delete
    On Error GoTo 0
    Application.DisplayAlerts = True

    Set dictTiers = GetUniqueTiersForCustomer(strAffiliate, strCustomer)
    
    ' Create a detailed sheet for each tier
    For Each varTier In dictTiers.Keys
        Set ws = wbReport.Sheets.Add(After:=wbReport.Sheets(wbReport.Sheets.Count))
        ws.Name = SanitizeSheetName(CStr(varTier))
        PopulateTierSheet ws, CStr(varTier), strCustomer
    Next varTier
    
    ' Populate the summary sheets with data for this customer
    PopulateSummarySheets wbReport, dictSheetToKeyFigureMap, strCustomer
    
    ' Apply all formatting to all sheets in one go at the end.
    FormatAllSheets wbReport, dictSheetToKeyFigureMap
    
    If Not DEBUG_MODE Then
        Dim strFilePath As String: strFilePath = GetOutputFilePath()
        
        On Error Resume Next
        wbReport.SaveAs strFilePath
        If Err.Number <> 0 Then
            WriteToLog m_wsLog, ltError, "ReportGenerator.Save", "Failed to save report for " & m_strAffiliate & " - " & m_strCustomer, Err.Number, "Path: " & strFilePath
        Else
            WriteToLog m_wsLog, ltInfo, "ReportGenerator.Save", "Report saved to " & strFilePath
        End If
        On Error GoTo 0
        
        wbReport.Close SaveChanges:=False
    End If
    
    LogPerformance m_wsLog, tStart, "GenerateCustomerReport", "Finished report for " & strAffiliate & " - " & strCustomer & " in " & Format$(Timer - tStart, "#,##0.00") & "s"
End Sub

'================================================================================================
'--- PRIVATE REPORT POPULATION & FORMATTING (OPTIMIZED) ---
'================================================================================================

Private Sub PopulateTierSheet(ByVal ws As Worksheet, ByVal strTier As String, ByVal strCustomer As String)
    Dim arrOutput() As Variant, arrHeader() As Variant, colProducts As Collection
    Dim monthIndex As Long, colIndex As Long, staticColCount As Long
    Dim numHistMonths As Long, numFcstMonths As Long
    Dim outputRowIndex As Long, subtotalStartRow As Long
    Dim forecastItem As cForecastItem, varKeyFigure As Variant
    
    Set colProducts = GetItemsForTierAndCustomer(strTier, strCustomer)
    If colProducts.Count = 0 Then Exit Sub
    
    staticColCount = GetTierReportCols().Count
    numHistMonths = UBound(m_DataManager.HistoryDataArray, 2) - g_dsHistory.StartOfMonthsCol + 1
    numFcstMonths = UBound(m_DataManager.DemandDataArray, 2) - g_dsDemand.StartOfMonthsCol + 1
    
    ReDim arrHeader(1 To staticColCount + numHistMonths + numFcstMonths)
    For colIndex = 1 To staticColCount
        arrHeader(colIndex) = GetTierReportCols()(colIndex).HeaderText
    Next colIndex
    For monthIndex = 1 To numHistMonths
        arrHeader(staticColCount + monthIndex) = Format$(m_DataManager.HistoryDataArray(1, g_dsHistory.StartOfMonthsCol + monthIndex - 1), "mmm-yy")
    Next monthIndex
    For monthIndex = 1 To numFcstMonths
        arrHeader(staticColCount + numHistMonths + monthIndex) = Format$(m_DataManager.DemandDataArray(1, g_dsDemand.StartOfMonthsCol + monthIndex - 1), "mmm-yy")
    Next monthIndex
    
    ReDim arrOutput(1 To (colProducts.Count * m_DataManager.KeyFigures.Count) + m_DataManager.KeyFigures.Count, 1 To UBound(arrHeader))
    outputRowIndex = 1
    
    For Each varKeyFigure In m_DataManager.KeyFigures.Keys
        subtotalStartRow = outputRowIndex
        For Each forecastItem In colProducts
            For colIndex = 1 To staticColCount
                Select Case GetTierReportCols()(colIndex).SourceProperty
                    Case FIELD_KEYFIGURE: arrOutput(outputRowIndex, colIndex) = CStr(varKeyFigure)
                    Case FIELD_AFFILIATE: arrOutput(outputRowIndex, colIndex) = forecastItem.Affiliate
                    Case FIELD_CUSTOMER: arrOutput(outputRowIndex, colIndex) = strCustomer
                    Case "ForecastTier": arrOutput(outputRowIndex, colIndex) = forecastItem.ForecastTier
                    Case "ForecastSubTier": arrOutput(outputRowIndex, colIndex) = forecastItem.ForecastSubTier
                    Case FIELD_LOCALITEMNBR: arrOutput(outputRowIndex, colIndex) = forecastItem.LocalItemNbr
                    Case FIELD_DESCRIPTION: arrOutput(outputRowIndex, colIndex) = forecastItem.Description
                    Case FIELD_ISD: arrOutput(outputRowIndex, colIndex) = forecastItem.ISD
                    Case FIELD_STATUS_STRING: arrOutput(outputRowIndex, colIndex) = forecastItem.StatusString
                    Case FIELD_PHASEOUTDATE: arrOutput(outputRowIndex, colIndex) = forecastItem.PhaseOutDate
                End Select
            Next colIndex
            
            Dim strHistKey As String
            strHistKey = forecastItem.Affiliate & "|" & strCustomer & "|" & CStr(varKeyFigure) & "|" & forecastItem.LocalItemNbr
            
            For monthIndex = 1 To numHistMonths
                Dim dteHistMonth As Date: dteHistMonth = m_DataManager.HistoryDataArray(1, g_dsHistory.StartOfMonthsCol + monthIndex - 1)
                If m_DataManager.HistoryCache.Exists(strHistKey) Then
                    If m_DataManager.HistoryCache.item(strHistKey).Exists(dteHistMonth) Then
                        arrOutput(outputRowIndex, staticColCount + monthIndex) = m_DataManager.HistoryCache.item(strHistKey).item(dteHistMonth)
                    End If
                End If
            Next monthIndex
            
            For monthIndex = 1 To numFcstMonths
                Dim dteFcstMonth As Date: dteFcstMonth = m_DataManager.DemandDataArray(1, g_dsDemand.StartOfMonthsCol + monthIndex - 1)
                Dim fcstKey As String: fcstKey = strCustomer & "|" & CStr(varKeyFigure) & "|" & dteFcstMonth
                If forecastItem.ForecastValues.Exists(fcstKey) Then
                    Dim baseValue As Double: baseValue = forecastItem.ForecastValues.item(fcstKey)
                    Dim finalValue As Double: finalValue = baseValue * forecastItem.GetForecastMultiplier(dteFcstMonth)
                    arrOutput(outputRowIndex, staticColCount + numHistMonths + monthIndex) = finalValue
                End If
            Next monthIndex
            outputRowIndex = outputRowIndex + 1
        Next forecastItem
        
        arrOutput(outputRowIndex, 1) = CStr(varKeyFigure): arrOutput(outputRowIndex, 2) = "TOTAL": arrOutput(outputRowIndex, 3) = strCustomer: arrOutput(outputRowIndex, 4) = strTier
        For colIndex = staticColCount + 1 To UBound(arrOutput, 2)
            Dim monthlyTotal As Double: monthlyTotal = 0
            Dim productRow As Long
            For productRow = subtotalStartRow To outputRowIndex - 1
                If IsNumeric(arrOutput(productRow, colIndex)) Then monthlyTotal = monthlyTotal + CDbl(arrOutput(productRow, colIndex))
            Next productRow
            arrOutput(outputRowIndex, colIndex) = monthlyTotal
        Next colIndex
        outputRowIndex = outputRowIndex + 1
    Next varKeyFigure
    
    ws.Range("A1").Resize(1, UBound(arrHeader)).Value = arrHeader
    ws.Range("A2").Resize(outputRowIndex - 1, UBound(arrHeader)).Value = arrOutput
End Sub

Private Sub PopulateSummarySheets(ByVal wbReport As Workbook, ByVal dictMap As Object, ByVal strCustomer As String)
    Dim ws As Worksheet, forecastItem As cForecastItem, arrOutput() As Variant, arrHeader() As Variant
    Dim monthIndex As Long, colIndex As Long, staticColCount As Long
    Dim numFcstMonths As Long, outputRowIndex As Long
    Dim strFullKeyFigure As String, varKey As Variant
    
    staticColCount = GetSummaryReportCols().Count
    numFcstMonths = UBound(m_DataManager.DemandDataArray, 2) - g_dsDemand.StartOfMonthsCol + 1
    
    ReDim arrHeader(1 To staticColCount + numFcstMonths)
    For colIndex = 1 To staticColCount
        arrHeader(colIndex) = GetSummaryReportCols()(colIndex).HeaderText
    Next colIndex
    For monthIndex = 1 To numFcstMonths
        arrHeader(staticColCount + monthIndex) = Format$(m_DataManager.DemandDataArray(1, g_dsDemand.StartOfMonthsCol + monthIndex - 1), "mmm-yy")
    Next monthIndex
    
    Dim affiliateItems As Collection
    Set affiliateItems = New Collection
    Dim tempItem As cForecastItem
    For Each varKey In m_DataManager.ForecastItems.Keys
        Set tempItem = m_DataManager.ForecastItems.item(varKey)
        If tempItem.Affiliate = m_strAffiliate Then
            affiliateItems.Add tempItem
        End If
    Next varKey
    
    For Each ws In wbReport.Worksheets
        If dictMap.Exists(ws.Name) Then
            strFullKeyFigure = dictMap.item(ws.Name)
            ReDim arrOutput(1 To affiliateItems.Count, 1 To UBound(arrHeader))
            outputRowIndex = 1
            
            For Each forecastItem In affiliateItems
                For colIndex = 1 To staticColCount
                    Select Case GetSummaryReportCols()(colIndex).SourceProperty
                        Case FIELD_AFFILIATE: arrOutput(outputRowIndex, colIndex) = forecastItem.Affiliate
                        Case FIELD_CUSTOMER: arrOutput(outputRowIndex, colIndex) = strCustomer
                        Case "ForecastTier": arrOutput(outputRowIndex, colIndex) = forecastItem.ForecastTier
                        Case "ForecastSubTier": arrOutput(outputRowIndex, colIndex) = forecastItem.ForecastSubTier
                        Case FIELD_LOCALITEMNBR: arrOutput(outputRowIndex, colIndex) = forecastItem.LocalItemNbr
                        Case FIELD_DESCRIPTION: arrOutput(outputRowIndex, colIndex) = forecastItem.Description
                        Case FIELD_ISD: arrOutput(outputRowIndex, colIndex) = forecastItem.ISD
                        Case FIELD_STATUS_STRING: arrOutput(outputRowIndex, colIndex) = forecastItem.StatusString
                        Case FIELD_PHASEOUTDATE: arrOutput(outputRowIndex, colIndex) = forecastItem.PhaseOutDate
                    End Select
                Next colIndex
                
                For monthIndex = 1 To numFcstMonths
                    Dim dteFcstMonth As Date: dteFcstMonth = m_DataManager.DemandDataArray(1, g_dsDemand.StartOfMonthsCol + monthIndex - 1)
                    Dim forecastKey As String: forecastKey = strCustomer & "|" & strFullKeyFigure & "|" & dteFcstMonth
                    If forecastItem.ForecastValues.Exists(forecastKey) Then
                        Dim baseValue As Double: baseValue = forecastItem.ForecastValues.item(forecastKey)
                        Dim finalValue As Double: finalValue = baseValue * forecastItem.GetForecastMultiplier(dteFcstMonth)
                        arrOutput(outputRowIndex, staticColCount + monthIndex) = finalValue
                    End If
                Next monthIndex
                outputRowIndex = outputRowIndex + 1
            Next forecastItem
            
            ws.Range("A1").Resize(1, UBound(arrHeader)).Value = arrHeader
            If outputRowIndex > 1 Then ws.Range("A2").Resize(outputRowIndex - 1, UBound(arrHeader)).Value = arrOutput
        End If
    Next ws
End Sub

Private Sub FormatAllSheets(ByVal wbReport As Workbook, ByVal dictSheetToKeyFigureMap As Object)
    Dim ws As Worksheet
    For Each ws In wbReport.Worksheets
        If dictSheetToKeyFigureMap.Exists(ws.Name) Then
            FormatSummarySheet ws
        Else
            FormatTierSheet ws
        End If
    Next ws
End Sub

Private Sub FormatTierSheet(ByVal ws As Worksheet)
    Dim lastRow As Long, lastCol As Long, staticColCount As Long, histColStart As Long, fcstColStart As Long
    
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    If lastRow <= 1 Then Exit Sub
    
    staticColCount = GetTierReportCols().Count
    histColStart = staticColCount + 1
    fcstColStart = histColStart + (UBound(m_DataManager.HistoryDataArray, 2) - g_dsHistory.StartOfMonthsCol + 1)
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    
    With Union(ws.Range("A1").Resize(1, staticColCount), ws.Range(ws.Cells(1, fcstColStart), ws.Cells(1, lastCol)))
        .Font.Bold = True: .Font.Color = vbWhite: .Interior.Color = RGB(0, 32, 96): .VerticalAlignment = xlCenter
    End With
    With ws.Range(ws.Cells(1, histColStart), ws.Cells(1, fcstColStart - 1))
        .Font.Bold = True: .Font.Color = vbBlack: .Interior.Color = RGB(217, 217, 217): .VerticalAlignment = xlCenter
    End With
    
    Dim col As Long
    For col = 1 To staticColCount
        ws.Columns(col).ColumnWidth = GetTierReportCols()(col).ColumnWidth
        If Len(GetTierReportCols()(col).NumberFormat) > 0 Then ws.Columns(col).NumberFormat = GetTierReportCols()(col).NumberFormat
    Next col
    
    ws.Range(ws.Cells(2, histColStart), ws.Cells(lastRow, fcstColStart - 1)).Interior.Color = RGB(242, 242, 242)
    ws.Range(ws.Cells(2, histColStart), ws.Cells(lastRow, lastCol)).NumberFormat = "#,##0"
    
    Dim rowIndex As Long
    For rowIndex = 2 To lastRow
        If ws.Cells(rowIndex, 2).Value = "TOTAL" Then
            With ws.Range(ws.Cells(rowIndex, 1), ws.Cells(rowIndex, lastCol))
                .Font.Bold = True: .Interior.Color = RGB(220, 230, 241)
            End With
        End If
    Next rowIndex
    
    With ws.Range("A1").Resize(lastRow, lastCol).Borders
        .LineStyle = xlContinuous: .Weight = xlThin
    End With
    
    ws.Activate: ws.Rows(2).Select: ActiveWindow.FreezePanes = True: ws.Cells(1, 1).Select
End Sub

Private Sub FormatSummarySheet(ByVal ws As Worksheet)
    Dim lastRow As Long, lastCol As Long, staticColCount As Long
    
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    If lastRow <= 1 Then Exit Sub
    
    staticColCount = GetSummaryReportCols().Count
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    
    With ws.Range("A1").Resize(1, lastCol)
        .Font.Bold = True: .Font.Color = vbWhite: .Interior.Color = RGB(0, 32, 96): .VerticalAlignment = xlCenter
    End With
    
    Dim col As Long
    For col = 1 To staticColCount
        ws.Columns(col).ColumnWidth = GetSummaryReportCols()(col).ColumnWidth
        If Len(GetSummaryReportCols()(col).NumberFormat) > 0 Then ws.Columns(col).NumberFormat = GetSummaryReportCols()(col).NumberFormat
    Next col
    
    ws.Range(ws.Cells(2, staticColCount + 1), ws.Cells(lastRow, lastCol)).NumberFormat = "#,##0"
    
    With ws.Range("A1").Resize(lastRow, lastCol).Borders
        .LineStyle = xlContinuous: .Weight = xlThin
    End With
    
    ws.Activate: ws.Rows(2).Select: ActiveWindow.FreezePanes = True: ws.Cells(1, 1).Select
End Sub

'================================================================================================
'--- PRIVATE HELPERS & UTILITIES ---
'================================================================================================

Private Function GetItemsForTierAndCustomer(strTier As String, strCustomer As String) As Collection
    ' Call utility from mUtilities
    Set GetItemsForTierAndCustomer = mUtilities.GetItemsForTierAndCustomer(m_DataManager, m_strAffiliate, strTier, strCustomer)
End Function

Private Function GetUniqueTiersForCustomer(ByVal strAffiliate As String, ByVal strCustomer As String) As Object
    ' Call utility from mUtilities
    Set GetUniqueTiersForCustomer = mUtilities.GetUniqueTiersForCustomer(m_DataManager.DemandDataArray, strAffiliate, strCustomer)
End Function

Private Function GetOutputFilePath() As String
    ' Call utility from mUtilities
    GetOutputFilePath = mUtilities.GetOutputFilePath(m_strBasePath, m_strAffiliate, m_strCustomer)
End Function

'================================================================================================
'--- CLASS DESTRUCTOR ---
'================================================================================================

Private Sub Class_Terminate()
    Set m_DataManager = Nothing
    Set m_wsLog = Nothing
End Sub
