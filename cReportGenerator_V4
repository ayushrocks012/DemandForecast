'@Folder("Classes")
Option Explicit

'================================================================================================
' Class:       cReportGenerator
' Purpose:     Encapsulates all logic for generating the final formatted Excel reports.
'              This class takes a fully processed data manager object and handles the
'              creation, population, and styling of the output workbook.
' Version:     3.2
' Author:      Ayush Goyal
' Date:        22-Aug-2025
'
' Change Log:
' V3.2:        - BUGFIX: Re-engineered the GetItemsForTierAndCustomer function to correctly
'                handle "deep chains" of product succession (A -> B -> C). The logic now
'                uses a loop to traverse the entire chain, ensuring all successors are
'                included in the final report.
' V3.1:        - BUGFIX: Fixed logic to correctly include Phase In/Discontinued SKUs.
' V3.0:        - REFACTOR: Changed report generation to create one output file per
'                Affiliate-Customer combination.
' V2.1:        - BUGFIX: Corrected a "Subscript out of range" error.
'================================================================================================

' --- Private Member Variables (State for a single report job) ---
Private m_DataManager As cDataManager
Private m_wsLog As Worksheet
Private m_strAffiliate As String
Private m_strCustomer As String ' New variable to hold the customer context
Private m_strBasePath As String

'================================================================================================
'--- INITIALIZATION & PUBLIC METHODS ---
'================================================================================================

Public Sub Init(ByVal dataManager As cDataManager, ByVal logSheet As Worksheet, ByVal basePath As String)
    Set m_DataManager = dataManager
    Set m_wsLog = logSheet
    m_strBasePath = basePath
End Sub

Public Sub GenerateCustomerReport(ByVal strAffiliate As String, ByVal strCustomer As String)
    m_strAffiliate = strAffiliate
    m_strCustomer = strCustomer ' Set the customer for this report job
    
    Dim wbReport As Workbook, ws As Worksheet
    Dim varKeyFigure As Variant, varTier As Variant
    Dim dictTiers As Object, dictSheetToKeyFigureMap As Object
    Set dictSheetToKeyFigureMap = CreateObject("Scripting.Dictionary")
    
    Set wbReport = Workbooks.Add
    
    ' Create the Summary sheets first
    For Each varKeyFigure In m_DataManager.KeyFigures.Keys
        Set ws = wbReport.Sheets.Add(Before:=wbReport.Sheets(1))
        Dim sheetName As String: sheetName = SanitizeSheetName("Summary - " & CStr(varKeyFigure))
        ws.Name = sheetName
        dictSheetToKeyFigureMap.Add sheetName, CStr(varKeyFigure)
    Next varKeyFigure
    
    Application.DisplayAlerts = False
    On Error Resume Next
    wbReport.Sheets("Sheet1").Delete
    On Error GoTo 0
    Application.DisplayAlerts = True

    ' Get only the tiers relevant to this specific customer
    Set dictTiers = GetUniqueTiersForCustomer(strAffiliate, strCustomer)
    
    ' Create a detailed sheet for each tier
    For Each varTier In dictTiers.Keys
        Set ws = wbReport.Sheets.Add(After:=wbReport.Sheets(wbReport.Sheets.Count))
        ws.Name = SanitizeSheetName(CStr(varTier))
        PopulateTierSheet ws, CStr(varTier), strCustomer
        FormatTierSheet ws
    Next varTier
    
    ' Populate the summary sheets with data for this customer
    PopulateSummarySheets wbReport, dictSheetToKeyFigureMap, strCustomer
    
    If Not DEBUG_MODE Then
        Application.StatusBar = "Saving final report for " & m_strAffiliate & " - " & m_strCustomer & "..."
        Dim strFilePath As String: strFilePath = GetOutputFilePath()
        
        On Error Resume Next
        wbReport.SaveAs strFilePath
        If Err.Number <> 0 Then
            WriteToLog ltError, "ReportGenerator.Save", "Failed to save report for " & m_strAffiliate & " - " & m_strCustomer, Err.Number, "Path: " & strFilePath
        Else
            WriteToLog ltInfo, "ReportGenerator.Save", "Report saved to " & strFilePath
        End If
        On Error GoTo 0
        
        wbReport.Close SaveChanges:=False
    End If
End Sub

'================================================================================================
'--- PRIVATE REPORT POPULATION & FORMATTING (OPTIMIZED) ---
'================================================================================================

Private Sub PopulateTierSheet(ByVal ws As Worksheet, ByVal strTier As String, ByVal strCustomer As String)
    Dim arrOutput() As Variant, arrHeader() As Variant, colProducts As Collection
    Dim monthIndex As Long, colIndex As Long, staticColCount As Long
    Dim numHistMonths As Long, numFcstMonths As Long
    Dim outputRowIndex As Long, subtotalStartRow As Long
    Dim forecastItem As cForecastItem, varKeyFigure As Variant
    
    Set colProducts = GetItemsForTierAndCustomer(strTier, strCustomer)
    If colProducts.Count = 0 Then Exit Sub
    
    staticColCount = GetTierReportCols().Count
    numHistMonths = UBound(m_DataManager.HistoryDataArray, 2) - g_dsHistory.StartOfMonthsCol + 1
    numFcstMonths = UBound(m_DataManager.DemandDataArray, 2) - g_dsDemand.StartOfMonthsCol + 1
    
    ReDim arrHeader(1 To staticColCount + numHistMonths + numFcstMonths)
    For colIndex = 1 To staticColCount
        arrHeader(colIndex) = GetTierReportCols()(colIndex).HeaderText
    Next colIndex
    For monthIndex = 1 To numHistMonths
        arrHeader(staticColCount + monthIndex) = Format$(m_DataManager.HistoryDataArray(1, g_dsHistory.StartOfMonthsCol + monthIndex - 1), "mmm-yy")
    Next monthIndex
    For monthIndex = 1 To numFcstMonths
        arrHeader(staticColCount + numHistMonths + monthIndex) = Format$(m_DataManager.DemandDataArray(1, g_dsDemand.StartOfMonthsCol + monthIndex - 1), "mmm-yy")
    Next monthIndex
    
    ReDim arrOutput(1 To (colProducts.Count * m_DataManager.KeyFigures.Count) + m_DataManager.KeyFigures.Count, 1 To UBound(arrHeader))
    outputRowIndex = 1
    
    For Each varKeyFigure In m_DataManager.KeyFigures.Keys
        subtotalStartRow = outputRowIndex
        For Each forecastItem In colProducts
            ' OPTIMIZED: Use Select Case instead of slow CallByName
            For colIndex = 1 To staticColCount
                Select Case GetTierReportCols()(colIndex).SourceProperty
                    Case "KeyFigure": arrOutput(outputRowIndex, colIndex) = CStr(varKeyFigure)
                    Case "Affiliate": arrOutput(outputRowIndex, colIndex) = forecastItem.Affiliate
                    Case "Customer": arrOutput(outputRowIndex, colIndex) = strCustomer
                    Case "ForecastTier": arrOutput(outputRowIndex, colIndex) = forecastItem.ForecastTier
                    Case "ForecastSubTier": arrOutput(outputRowIndex, colIndex) = forecastItem.ForecastSubTier
                    Case "LocalItemNbr": arrOutput(outputRowIndex, colIndex) = forecastItem.LocalItemNbr
                    Case "Description": arrOutput(outputRowIndex, colIndex) = forecastItem.Description
                    Case "ISD": arrOutput(outputRowIndex, colIndex) = forecastItem.ISD
                    Case "StatusString": arrOutput(outputRowIndex, colIndex) = forecastItem.StatusString
                    Case "PhaseOutDate": arrOutput(outputRowIndex, colIndex) = forecastItem.PhaseOutDate
                End Select
            Next colIndex
            
            Dim strHistKey As String
            ' History key format: "Affiliate|Customer|KeyFigure|LocalItemNbr"
            strHistKey = forecastItem.Affiliate & "|" & strCustomer & "|" & CStr(varKeyFigure) & "|" & forecastItem.LocalItemNbr
            
            For monthIndex = 1 To numHistMonths
                Dim dteHistMonth As Date: dteHistMonth = m_DataManager.HistoryDataArray(1, g_dsHistory.StartOfMonthsCol + monthIndex - 1)
                If m_DataManager.HistoryCache.Exists(strHistKey) Then
                    If m_DataManager.HistoryCache.item(strHistKey).Exists(dteHistMonth) Then
                        arrOutput(outputRowIndex, staticColCount + monthIndex) = m_DataManager.HistoryCache.item(strHistKey).item(dteHistMonth)
                    End If
                End If
            Next monthIndex
            
            For monthIndex = 1 To numFcstMonths
                Dim dteFcstMonth As Date: dteFcstMonth = m_DataManager.DemandDataArray(1, g_dsDemand.StartOfMonthsCol + monthIndex - 1)
                ' Forecast key format: "Customer|KeyFigure|Date"
                Dim fcstKey As String: fcstKey = strCustomer & "|" & CStr(varKeyFigure) & "|" & dteFcstMonth
                If forecastItem.ForecastValues.Exists(fcstKey) Then
                    Dim baseValue As Double: baseValue = forecastItem.ForecastValues.item(fcstKey)
                    Dim finalValue As Double: finalValue = baseValue * forecastItem.GetForecastMultiplier(dteFcstMonth)
                    arrOutput(outputRowIndex, staticColCount + numHistMonths + monthIndex) = finalValue
                End If
            Next monthIndex
            outputRowIndex = outputRowIndex + 1
        Next forecastItem
        
        arrOutput(outputRowIndex, 1) = CStr(varKeyFigure): arrOutput(outputRowIndex, 2) = "TOTAL": arrOutput(outputRowIndex, 3) = strCustomer: arrOutput(outputRowIndex, 4) = strTier
        For colIndex = staticColCount + 1 To UBound(arrOutput, 2)
            Dim monthlyTotal As Double: monthlyTotal = 0
            Dim productRow As Long
            For productRow = subtotalStartRow To outputRowIndex - 1
                If IsNumeric(arrOutput(productRow, colIndex)) Then monthlyTotal = monthlyTotal + CDbl(arrOutput(productRow, colIndex))
            Next productRow
            arrOutput(outputRowIndex, colIndex) = monthlyTotal
        Next colIndex
        outputRowIndex = outputRowIndex + 1
    Next varKeyFigure
    
    ws.Range("A1").Resize(1, UBound(arrHeader)).Value = arrHeader
    ws.Range("A2").Resize(outputRowIndex - 1, UBound(arrHeader)).Value = arrOutput
End Sub

Private Sub FormatTierSheet(ByVal ws As Worksheet)
    Dim lastRow As Long, lastCol As Long, staticColCount As Long, histColStart As Long, fcstColStart As Long
    
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    If lastRow <= 1 Then Exit Sub
    
    staticColCount = GetTierReportCols().Count
    histColStart = staticColCount + 1
    fcstColStart = histColStart + (UBound(m_DataManager.HistoryDataArray, 2) - g_dsHistory.StartOfMonthsCol + 1)
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    
    With Union(ws.Range("A1").Resize(1, staticColCount), ws.Range(ws.Cells(1, fcstColStart), ws.Cells(1, lastCol)))
        .Font.Bold = True: .Font.Color = vbWhite: .Interior.Color = RGB(0, 32, 96): .VerticalAlignment = xlCenter
    End With
    With ws.Range(ws.Cells(1, histColStart), ws.Cells(1, fcstColStart - 1))
        .Font.Bold = True: .Font.Color = vbBlack: .Interior.Color = RGB(217, 217, 217): .VerticalAlignment = xlCenter
    End With
    
    Dim col As Long
    For col = 1 To staticColCount
        ws.Columns(col).ColumnWidth = GetTierReportCols()(col).ColumnWidth
        If Len(GetTierReportCols()(col).NumberFormat) > 0 Then ws.Columns(col).NumberFormat = GetTierReportCols()(col).NumberFormat
    Next col
    
    ws.Range(ws.Cells(2, histColStart), ws.Cells(lastRow, fcstColStart - 1)).Interior.Color = RGB(242, 242, 242)
    ws.Range(ws.Cells(2, histColStart), ws.Cells(lastRow, lastCol)).NumberFormat = "#,##0"
    
    Dim rowIndex As Long
    For rowIndex = 2 To lastRow
        If ws.Cells(rowIndex, 2).Value = "TOTAL" Then
            With ws.Range(ws.Cells(rowIndex, 1), ws.Cells(rowIndex, lastCol))
                .Font.Bold = True: .Interior.Color = RGB(220, 230, 241)
            End With
        End If
    Next rowIndex
    
    With ws.Range("A1").Resize(lastRow, lastCol).Borders
        .LineStyle = xlContinuous: .Weight = xlThin
    End With
    
    ws.Activate: ws.Rows(2).Select: ActiveWindow.FreezePanes = True: ws.Cells(1, 1).Select
End Sub

Private Sub PopulateSummarySheets(ByVal wbReport As Workbook, ByVal dictMap As Object, ByVal strCustomer As String)
    Dim ws As Worksheet, forecastItem As cForecastItem, arrOutput() As Variant, arrHeader() As Variant
    Dim monthIndex As Long, colIndex As Long, staticColCount As Long
    Dim numFcstMonths As Long, outputRowIndex As Long
    Dim strFullKeyFigure As String, varKey As Variant
    
    staticColCount = GetSummaryReportCols().Count
    numFcstMonths = UBound(m_DataManager.DemandDataArray, 2) - g_dsDemand.StartOfMonthsCol + 1
    
    ReDim arrHeader(1 To staticColCount + numFcstMonths)
    For colIndex = 1 To staticColCount
        arrHeader(colIndex) = GetSummaryReportCols()(colIndex).HeaderText
    Next colIndex
    For monthIndex = 1 To numFcstMonths
        arrHeader(staticColCount + monthIndex) = Format$(m_DataManager.DemandDataArray(1, g_dsDemand.StartOfMonthsCol + monthIndex - 1), "mmm-yy")
    Next monthIndex
    
    For Each ws In wbReport.Worksheets
        If dictMap.Exists(ws.Name) Then
            strFullKeyFigure = dictMap.item(ws.Name)
            ReDim arrOutput(1 To m_DataManager.ForecastItems.Count, 1 To UBound(arrHeader))
            outputRowIndex = 1
            
            For Each varKey In m_DataManager.ForecastItems.Keys
                Set forecastItem = m_DataManager.ForecastItems.item(varKey)
                If forecastItem.Affiliate = m_strAffiliate Then
                    ' OPTIMIZED: Use Select Case instead of slow CallByName
                    For colIndex = 1 To staticColCount
                        Select Case GetSummaryReportCols()(colIndex).SourceProperty
                            Case "Affiliate": arrOutput(outputRowIndex, colIndex) = forecastItem.Affiliate
                            Case "Customer": arrOutput(outputRowIndex, colIndex) = strCustomer
                            Case "ForecastTier": arrOutput(outputRowIndex, colIndex) = forecastItem.ForecastTier
                            Case "ForecastSubTier": arrOutput(outputRowIndex, colIndex) = forecastItem.ForecastSubTier
                            Case "LocalItemNbr": arrOutput(outputRowIndex, colIndex) = forecastItem.LocalItemNbr
                            Case "Description": arrOutput(outputRowIndex, colIndex) = forecastItem.Description
                            Case "ISD": arrOutput(outputRowIndex, colIndex) = forecastItem.ISD
                            Case "StatusString": arrOutput(outputRowIndex, colIndex) = forecastItem.StatusString
                            Case "PhaseOutDate": arrOutput(outputRowIndex, colIndex) = forecastItem.PhaseOutDate
                        End Select
                    Next colIndex
                    
                    For monthIndex = 1 To numFcstMonths
                        Dim dteFcstMonth As Date: dteFcstMonth = m_DataManager.DemandDataArray(1, g_dsDemand.StartOfMonthsCol + monthIndex - 1)
                        Dim forecastKey As String: forecastKey = strCustomer & "|" & strFullKeyFigure & "|" & dteFcstMonth
                        If forecastItem.ForecastValues.Exists(forecastKey) Then
                            Dim baseValue As Double: baseValue = forecastItem.ForecastValues.item(forecastKey)
                            Dim finalValue As Double: finalValue = baseValue * forecastItem.GetForecastMultiplier(dteFcstMonth)
                            arrOutput(outputRowIndex, staticColCount + monthIndex) = finalValue
                        End If
                    Next monthIndex
                    outputRowIndex = outputRowIndex + 1
                End If
            Next varKey
            
            ws.Range("A1").Resize(1, UBound(arrHeader)).Value = arrHeader
            If outputRowIndex > 1 Then ws.Range("A2").Resize(outputRowIndex - 1, UBound(arrHeader)).Value = arrOutput
            FormatSummarySheet ws
        End If
    Next ws
End Sub

Private Sub FormatSummarySheet(ByVal ws As Worksheet)
    Dim lastRow As Long, lastCol As Long, staticColCount As Long
    
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    If lastRow <= 1 Then Exit Sub
    
    staticColCount = GetSummaryReportCols().Count
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    
    With ws.Range("A1").Resize(1, lastCol)
        .Font.Bold = True: .Font.Color = vbWhite: .Interior.Color = RGB(0, 32, 96): .VerticalAlignment = xlCenter
    End With
    
    Dim col As Long
    For col = 1 To staticColCount
        ws.Columns(col).ColumnWidth = GetSummaryReportCols()(col).ColumnWidth
        If Len(GetSummaryReportCols()(col).NumberFormat) > 0 Then ws.Columns(col).NumberFormat = GetSummaryReportCols()(col).NumberFormat
    Next col
    
    ws.Range(ws.Cells(2, staticColCount + 1), ws.Cells(lastRow, lastCol)).NumberFormat = "#,##0"
    
    With ws.Range("A1").Resize(lastRow, lastCol).Borders
        .LineStyle = xlContinuous: .Weight = xlThin
    End With
    
    ws.Activate: ws.Rows(2).Select: ActiveWindow.FreezePanes = True: ws.Cells(1, 1).Select
End Sub

'================================================================================================
'--- PRIVATE HELPERS & UTILITIES ---
'================================================================================================

Private Function GetItemsForTierAndCustomer(strTier As String, strCustomer As String) As Collection
' Purpose: Finds all unique products relevant to a specific Tier and Customer.
' This new logic includes items with historical sales AND their successors.
    Set GetItemsForTierAndCustomer = New Collection
    Dim dictItemsForReport As Object: Set dictItemsForReport = CreateObject("Scripting.Dictionary")
    
    Dim rowIndex As Long, arrHistory As Variant: arrHistory = m_DataManager.HistoryDataArray
    Dim strLocalItemNbr As String, currentItem As cForecastItem
    
    ' PERFORMANCE: Build a lookup map once to find a master item key from a LocalItemNbr.
    Dim mapLocalToMasterKey As Object: Set mapLocalToMasterKey = CreateObject("Scripting.Dictionary")
    Dim varKey As Variant, obj As cForecastItem
    For Each varKey In m_DataManager.ForecastItems.Keys
        Set obj = m_DataManager.ForecastItems.item(varKey)
        If obj.Affiliate = m_strAffiliate Then
            If Not mapLocalToMasterKey.Exists(obj.LocalItemNbr) Then
                mapLocalToMasterKey.Add obj.LocalItemNbr, varKey
            End If
        End If
    Next varKey

    ' STEP 1: Iterate through historical sales to find all relevant products.
    For rowIndex = 2 To UBound(arrHistory, 1)
        If arrHistory(rowIndex, g_dsHistory.GetCol("Affiliate")) = m_strAffiliate And _
           arrHistory(rowIndex, g_dsHistory.GetCol("Tier")) = strTier And _
           arrHistory(rowIndex, g_dsHistory.GetCol("Customer")) = strCustomer Then
            
            strLocalItemNbr = arrHistory(rowIndex, g_dsHistory.GetCol("LocalItemNbr"))
            
            ' Find the primary item that has historical sales
            If mapLocalToMasterKey.Exists(strLocalItemNbr) Then
                Dim masterKey As String: masterKey = mapLocalToMasterKey.item(strLocalItemNbr)
                
                If Not dictItemsForReport.Exists(masterKey) Then
                    Set currentItem = m_DataManager.ForecastItems.item(masterKey)
                    dictItemsForReport.Add masterKey, currentItem
                    
                    ' STEP 2: BUGFIX - Traverse the ENTIRE successor chain (A -> B -> C)
                    Do While currentItem.IsPhasingOut And Len(currentItem.SupersededByProductID) > 0
                        Dim successorKey As String: successorKey = m_strAffiliate & "|" & currentItem.SupersededByProductID
                        
                        If m_DataManager.ForecastItems.Exists(successorKey) Then
                            ' Check if we've already added this to avoid infinite loops
                            If Not dictItemsForReport.Exists(successorKey) Then
                                Set currentItem = m_DataManager.ForecastItems.item(successorKey)
                                dictItemsForReport.Add successorKey, currentItem
                            Else
                                Exit Do ' Already processed this item, break the loop
                            End If
                        Else
                            Exit Do ' Chain is broken, break the loop
                        End If
                    Loop
                End If
            End If
        End If
    Next rowIndex
    
    ' STEP 3: Add the found items from the dictionary to the final collection
    If dictItemsForReport.Count > 0 Then
        Dim key As Variant
        For Each key In dictItemsForReport.Keys
            GetItemsForTierAndCustomer.Add dictItemsForReport.item(key)
        Next key
    End If
End Function

Private Function GetUniqueTiersForCustomer(ByVal strAffiliate As String, ByVal strCustomer As String) As Object
    ' This helper gets all unique Tiers for a specific Affiliate and Customer
    Set GetUniqueTiersForCustomer = CreateObject("Scripting.Dictionary")
    Dim rowIndex As Long, arrDemand As Variant: arrDemand = m_DataManager.DemandDataArray
    
    For rowIndex = 2 To UBound(arrDemand, 1)
        If arrDemand(rowIndex, g_dsDemand.GetCol("Affiliate")) = strAffiliate And _
           arrDemand(rowIndex, g_dsDemand.GetCol("Customer")) = strCustomer Then
            Dim strTier As String: strTier = arrDemand(rowIndex, g_dsDemand.GetCol("Tier"))
            If Not GetUniqueTiersForCustomer.Exists(strTier) Then
                GetUniqueTiersForCustomer.Add strTier, 1
            End If
        End If
    Next rowIndex
End Function

Private Function SanitizeSheetName(ByVal strName As String) As String
    Dim sanitizedString As String: sanitizedString = strName
    sanitizedString = Replace(sanitizedString, "/", "-"): sanitizedString = Replace(sanitizedString, "\", "-")
    sanitizedString = Replace(sanitizedString, "?", ""): sanitizedString = Replace(sanitizedString, "*", "")
    sanitizedString = Replace(sanitizedString, "[", ""): sanitizedString = Replace(sanitizedString, "]", "")
    SanitizeSheetName = Left$(sanitizedString, 31)
End Function

Private Function GetOutputFilePath() As String
    ' UPDATED: File path now includes the customer name for separate file generation
    GetOutputFilePath = m_strBasePath & "\Demand Forecast - " & m_strAffiliate & " - " & m_strCustomer & " - " & Format$(Now, "ddmmyyyy_hhmmss") & ".xlsx"
End Function

Private Sub WriteToLog(ByVal logType As logType, ByVal procedureName As String, ByVal message As String, Optional ByVal errNumber As Long = 0, Optional ByVal errContext As String = "")
    If m_wsLog Is Nothing Then Exit Sub
    Dim nextRow As Long: nextRow = m_wsLog.Cells(m_wsLog.Rows.Count, "A").End(xlUp).Row + 1
    With m_wsLog.Rows(nextRow)
        .Cells(1).Value = Now(): .Cells(2).Value = GetLogTypeString(logType)
        .Cells(3).Value = procedureName: .Cells(4).Value = message
        If errNumber <> 0 Then .Cells(5).Value = "Err " & errNumber & ": " & errContext Else .Cells(5).Value = errContext
    End With
End Sub

Private Function GetLogTypeString(ByVal logType As logType) As String
    Select Case logType
        Case ltInfo: GetLogTypeString = "Info"
        Case ltWarning: GetLogTypeString = "Warning"
        Case ltError: GetLogTypeString = "Error"
        Case ltFatal: GetLogTypeString = "FATAL"
        Case ltProfile: GetLogTypeString = "Profile"
    End Select
End Function

Private Sub Class_Terminate()
    Set m_DataManager = Nothing
    Set m_wsLog = Nothing
End Sub
