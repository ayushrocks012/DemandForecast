'@Folder("Forecasting")
Option Explicit

'================================================================================================
' Module:      mForecasting
' Purpose:     Main orchestrator for the forecasting process. It initializes the environment
'              and uses dedicated class objects to manage data, execute calculations,
'              and generate reports.
' Version:     45.0
' Author:      Ayush Goyal
' Date:        22-Aug-2025
'
' Change Log:
' V45.0:       - FEATURE: Added more detailed and granular status bar messages to show
'                calculation vs. reporting stages and progress through each customer file.
'              - FEATURE: Added more detailed logging for the start and end of the
'                calculation and reporting stages for each affiliate.
'              - BUGFIX: Added DoEvents to the main loop to ensure the UI and status bar
'                update in real-time during the process.
' V44.0:       - REFACTOR: Changed loop to generate a separate output file per customer.
'================================================================================================

'--- Private Module-Level Variables ---
Private wbHost As Workbook
Private wsLog As Worksheet
Private lngWarningCount As Long

'================================================================================================
' 1. MAIN PUBLIC ORCHESTRATOR
'================================================================================================

'@Ignore UnusedMember
Public Sub UpdateForecast()
    Dim tStart As Double: tStart = Timer
    Dim dataManager As cDataManager
    
    If Not InitializeRun() Then GoTo Main_Exit
    
    Set dataManager = New cDataManager
    dataManager.Init wbHost, wsLog
    If Not dataManager.LoadAndProcessData() Then GoTo Main_Exit
    
    ProcessAllAffiliates dataManager
    
    lngWarningCount = dataManager.WarningCount
    
Main_Exit:
    FinalizeRun tStart
End Sub


'================================================================================================
' 2. CORE WORKFLOW STAGES
'================================================================================================

Private Function InitializeRun() As Boolean
    Dim tCheckpoint As Double: tCheckpoint = Timer
    On Error GoTo Init_ErrorHandler
    
    SetupApplication
    
    Set wbHost = ThisWorkbook
    InitializeAllConfigs
    lngWarningCount = 0
    
    Application.DisplayAlerts = False
    On Error Resume Next
    wbHost.Sheets(SHEET_LOG).Delete
    On Error GoTo Init_ErrorHandler
    Application.DisplayAlerts = True
    
    Set wsLog = wbHost.Sheets.Add(After:=wbHost.Sheets(wbHost.Sheets.Count))
    InitializeLogSheet wsLog
    
    LogPerformance tCheckpoint, "Initialize Environment"
    InitializeRun = True
    Exit Function

Init_ErrorHandler:
    MsgBox "A critical error occurred during initialization: " & Err.Description, vbCritical, "Initialization Failed"
    InitializeRun = False
End Function

Private Sub ProcessAllAffiliates(ByVal dataManager As cDataManager)
    Dim varAffiliate As Variant, strAffiliate As String
    Dim lngCounter As Long, lngTotal As Long
    Dim tCheckpoint As Double: tCheckpoint = Timer
    
    Dim engine As cCalculationEngine
    Set engine = New cCalculationEngine
    engine.AffiliateDim = CALC_AFFILIATE_DIM
    engine.CustomerDim = CALC_CUSTOMER_DIM
    engine.TotalLevelDim = CALC_TOTAL_LEVEL_DIM
    engine.ShareLevelDim = CALC_SHARE_LEVEL_DIM
    engine.KeyFigureDim = CALC_KEY_FIGURE_DIM
    engine.Init dataManager.DemandDataArray, g_dsDemand.StartOfMonthsCol
    
    Dim reporter As cReportGenerator
    Set reporter = New cReportGenerator
    reporter.Init dataManager, wsLog, wbHost.Path
    
    lngTotal = dataManager.Affiliates.Count
    If lngTotal = 0 Then
        WriteToLog ltWarning, "ProcessAllAffiliates", "No affiliates found in Demand Forecast sheet."
        Exit Sub
    End If
    
    For Each varAffiliate In dataManager.Affiliates.Keys
        strAffiliate = CStr(varAffiliate)
        lngCounter = lngCounter + 1
        On Error GoTo Affiliate_ErrorHandler
        
        ' --- STAGE 1: CALCULATE FOR THE ENTIRE AFFILIATE ---
        Application.StatusBar = "Calculating Forecast for " & strAffiliate & " (" & lngCounter & " of " & lngTotal & ")..."
        DoEvents ' Force UI update
        
        WriteToLog ltInfo, "ProcessAllAffiliates", "Starting Calculations for: " & strAffiliate
        
        Dim affiliateItems As Object
        Set affiliateItems = GetItemsForAffiliate(strAffiliate, dataManager.ForecastItems)

        InitializeForecastValues affiliateItems
        ComputeBaseForecasts strAffiliate, affiliateItems, dataManager, engine
        ApplySuccessorAdjustments affiliateItems
        
        WriteToLog ltInfo, "ProcessAllAffiliates", "Finished Calculations for: " & strAffiliate
        
        ' --- STAGE 2: GENERATE A SEPARATE REPORT FOR EACH CUSTOMER ---
        WriteToLog ltInfo, "ProcessAllAffiliates", "Starting Reporting for: " & strAffiliate
        Dim dictCustomers As Object
        Set dictCustomers = GetUniqueCustomersForAffiliate(strAffiliate, dataManager.DemandDataArray)
        
        Dim varCustomer As Variant, custCounter As Long, custTotal As Long
        custTotal = dictCustomers.Count
        custCounter = 0
        
        For Each varCustomer In dictCustomers.Keys
            custCounter = custCounter + 1
            ' DETAILED STATUS: Show progress through each customer file
            Application.StatusBar = "Generating Report for " & strAffiliate & " - " & CStr(varCustomer) & " (" & custCounter & " of " & custTotal & ")..."
            DoEvents ' Force UI update
            
            reporter.GenerateCustomerReport strAffiliate, CStr(varCustomer)
        Next varCustomer
        
        WriteToLog ltInfo, "ProcessAllAffiliates", "Finished Reporting for: " & strAffiliate
        
        GoTo Next_Affiliate
Affiliate_ErrorHandler:
        lngWarningCount = lngWarningCount + 1
        WriteToLog ltError, "ProcessAllAffiliates", "Critical error processing affiliate '" & strAffiliate & "'.", Err.Number, Err.Description
        Resume Next_Affiliate
Next_Affiliate:
        On Error GoTo 0
    Next varAffiliate
    
    LogPerformance tCheckpoint, "Process All Affiliates"
End Sub

Private Sub FinalizeRun(ByVal tStart As Double)
    On Error Resume Next
    
    CleanupAllConfigs
    
    Application.StatusBar = False
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.EnableEvents = True ' Re-enable events
    
    Dim strMessage As String
    strMessage = "Forecast process completed in " & format$(Timer - tStart, "#,##0.00") & " seconds." & vbCrLf & vbCrLf
    strMessage = strMessage & "Warnings: " & lngWarningCount & " (see Log sheet for details)"
    
    MsgBox strMessage, IIf(lngWarningCount > 0, vbExclamation, vbInformation), "Forecast Update Complete"
    
    On Error GoTo 0
End Sub


'================================================================================================
' 3. FORECAST CALCULATION LOGIC
'================================================================================================

Private Sub InitializeForecastValues(ByVal dictAffiliateItems As Object)
    Dim forecastItem As cForecastItem, itemKey As Variant
    For Each itemKey In dictAffiliateItems.Keys
        Set forecastItem = dictAffiliateItems.item(itemKey)
        ' Initialize or clear the forecast dictionary for this run
        Set forecastItem.ForecastValues = CreateObject("Scripting.Dictionary")
    Next itemKey
End Sub

Private Sub ComputeBaseForecasts(ByVal strAffiliate As String, ByVal dictAffiliateItems As Object, ByVal dataManager As cDataManager, ByVal engine As cCalculationEngine)
    Dim forecastItem As cForecastItem, itemKey As Variant
    Dim keyFigure As Variant, varCustomer As Variant
    
    ' Get a list of all unique customers for this affiliate to loop through
    Dim dictCustomers As Object
    Set dictCustomers = GetUniqueCustomersForAffiliate(strAffiliate, dataManager.DemandDataArray)
    
    ' PERFORMANCE: The main loop now iterates only through items relevant to this affiliate
    For Each itemKey In dictAffiliateItems.Keys
        Set forecastItem = dictAffiliateItems.item(itemKey)
        
        If DEBUG_MODE Then WriteToLog ltInfo, "ComputeBaseForecasts", "Processing Item: " & forecastItem.DebugSummary()
        
        For Each varCustomer In dictCustomers.Keys
            For Each keyFigure In dataManager.KeyFigures.Keys
                ' Execute the calculation for the specific item-customer-keyfigure combination
                engine.Execute forecastItem, CStr(varCustomer), CStr(keyFigure), dataManager.HistorySumCache, dataManager.DemandCache
            Next keyFigure
        Next varCustomer
            
    Next itemKey
End Sub

Private Sub ApplySuccessorAdjustments(ByVal dictAffiliateItems As Object)
    ' This logic receives the pre-filtered list of affiliate items directly.
    If dictAffiliateItems.Count > 0 Then
        Dim lifecycleManager As cProductLifecycle
        Set lifecycleManager = New cProductLifecycle
        lifecycleManager.ProcessSuccessorTransfers dictAffiliateItems
    End If
End Sub


'================================================================================================
' 4. UTILITY & HELPER FUNCTIONS
'================================================================================================

Private Function GetItemsForAffiliate(ByVal strAffiliate As String, ByVal allItems As Object) As Object
' Purpose: Creates a new dictionary containing only the cForecastItem objects for a specific affiliate.
    Dim dict As Object: Set dict = CreateObject("Scripting.Dictionary")
    Dim itemKey As Variant, item As cForecastItem
    
    For Each itemKey In allItems.Keys
        Set item = allItems.item(itemKey)
        If item.Affiliate = strAffiliate Then
            dict.Add itemKey, item
        End If
    Next itemKey
    
    Set GetItemsForAffiliate = dict
End Function

Private Function GetUniqueCustomersForAffiliate(ByVal strAffiliate As String, ByVal arrDemand As Variant) As Object
' Purpose: Extracts a unique list of customers for a specific affiliate from the demand data array.
    Set GetUniqueCustomersForAffiliate = CreateObject("Scripting.Dictionary")
    Dim rowIndex As Long
    Dim colAffiliate As Long: colAffiliate = g_dsDemand.GetCol("Affiliate")
    Dim colCustomer As Long: colCustomer = g_dsDemand.GetCol("Customer")
    
    For rowIndex = 2 To UBound(arrDemand, 1)
        If arrDemand(rowIndex, colAffiliate) = strAffiliate Then
            Dim strCustomer As String: strCustomer = arrDemand(rowIndex, colCustomer)
            If Not GetUniqueCustomersForAffiliate.Exists(strCustomer) Then
                GetUniqueCustomersForAffiliate.Add strCustomer, 1
            End If
        End If
    Next rowIndex
End Function

Private Sub SetupApplication()
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False ' Disable events for performance
End Sub

Private Sub InitializeLogSheet(ByVal ws As Worksheet)
    ws.Name = SHEET_LOG
    With ws.Range("A1:E1")
        .Value = Array("Timestamp", "Type", "Procedure", "Message", "Context / Error")
        .Font.Bold = True
    End With
    ws.Columns("A:E").AutoFit
End Sub

Private Sub WriteToLog(ByVal logType As logType, ByVal procedureName As String, ByVal message As String, Optional ByVal errNumber As Long = 0, Optional ByVal errContext As String = "")
    If wsLog Is Nothing Then Exit Sub
    Dim nextRow As Long: nextRow = wsLog.Cells(wsLog.Rows.Count, "A").End(xlUp).Row + 1
    With wsLog.Rows(nextRow)
        .Cells(1).Value = Now(): .Cells(2).Value = GetLogTypeString(logType)
        .Cells(3).Value = procedureName: .Cells(4).Value = message
        If errNumber <> 0 Then .Cells(5).Value = "Err " & errNumber & ": " & errContext Else .Cells(5).Value = errContext
    End With
End Sub

Private Sub LogPerformance(ByRef tCheckpoint As Double, ByVal strStageName As String)
    WriteToLog ltProfile, strStageName, "Stage completed in " & format$(Timer - tCheckpoint, "#,##0.00") & "s"
    tCheckpoint = Timer
End Sub

Private Function GetLogTypeString(ByVal logType As logType) As String
    Select Case logType
        Case ltInfo: GetLogTypeString = "Info"
        Case ltWarning: GetLogTypeString = "Warning"
        Case ltError: GetLogTypeString = "Error"
        Case ltFatal: GetLogTypeString = "FATAL"
        Case ltProfile: GetLogTypeString = "Profile"
    End Select
End Function
