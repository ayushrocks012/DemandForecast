'@Folder("Utilities")
Option Explicit

'================================================================================================
' Module:      mUtilities
' Purpose:     Provides a central location for all general-purpose helper and utility
'              functions used throughout the application. This promotes code reuse and
'              follows the principle of Separation of Concerns.
' Version:     1.0
' Author:      Ayush Goyal
' Date:        22-Aug-2025
'================================================================================================

'================================================================================================
' 1. APPLICATION & ENVIRONMENT HELPERS
'================================================================================================

Public Sub SetupApplication()
' Purpose: Configures the Excel application environment for optimal performance during execution.
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False
End Sub

Public Function SheetExists(ByVal wb As Workbook, ByVal sheetName As String) As Boolean
' Purpose: Checks if a worksheet with the given name exists in the specified workbook.
    Dim ws As Worksheet
    On Error Resume Next
    Set ws = wb.Sheets(sheetName)
    On Error GoTo 0
    SheetExists = Not ws Is Nothing
End Function

Public Function LoadDataToArray(ByVal ws As Worksheet) As Variant
' Purpose: Reads the entire used range of a worksheet into a variant array for fast processing.
    If ws Is Nothing Then Exit Function
    Dim lRow As Long: lRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    Dim lCol As Long: lCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    If lRow > 1 And lCol > 0 Then LoadDataToArray = ws.Range("A1", ws.Cells(lRow, lCol)).Value
End Function

'================================================================================================
' 2. LOGGING & PERFORMANCE HELPERS
'================================================================================================

Public Sub InitializeLogSheet(ByVal ws As Worksheet)
' Purpose: Sets up the headers for a new log sheet.
    ws.Name = SHEET_LOG
    With ws.Range("A1:E1")
        .Value = Array("Timestamp", "Type", "Procedure", "Message", "Context / Error")
        .Font.Bold = True
    End With
    ws.Columns("A:E").AutoFit
End Sub

Public Sub WriteToLog(ByVal wsLog As Worksheet, ByVal logType As logType, ByVal procedureName As String, ByVal message As String, Optional ByVal errNumber As Long = 0, Optional ByVal errContext As String = "")
' Purpose: Writes a new entry to the specified log worksheet.
    If wsLog Is Nothing Then Exit Sub
    Dim nextRow As Long: nextRow = wsLog.Cells(wsLog.Rows.Count, "A").End(xlUp).Row + 1
    With wsLog.Rows(nextRow)
        .Cells(1).Value = Now()
        .Cells(2).Value = GetLogTypeString(logType)
        .Cells(3).Value = procedureName
        .Cells(4).Value = message
        If errNumber <> 0 Then .Cells(5).Value = "Err " & errNumber & ": " & errContext Else .Cells(5).Value = errContext
    End With
End Sub

Public Sub LogPerformance(ByVal wsLog As Worksheet, ByRef tCheckpoint As Double, ByVal strStageName As String)
' Purpose: Logs a performance checkpoint message and resets the timer.
    WriteToLog wsLog, ltProfile, strStageName, "Stage completed in " & Format$(Timer - tCheckpoint, "#,##0.00") & "s"
    tCheckpoint = Timer
End Sub

Public Function GetLogTypeString(ByVal logType As logType) As String
' Purpose: Converts a logType enum value to its string representation.
    Select Case logType
        Case ltInfo: GetLogTypeString = "Info"
        Case ltWarning: GetLogTypeString = "Warning"
        Case ltError: GetLogTypeString = "Error"
        Case ltFatal: GetLogTypeString = "FATAL"
        Case ltProfile: GetLogTypeString = "Profile"
    End Select
End Function

'================================================================================================
' 3. DATA & COLLECTION HELPERS
'================================================================================================

Public Function GetItemsForAffiliate(ByVal strAffiliate As String, ByVal allItems As Object) As Object
' Purpose: Creates a new dictionary containing only the cForecastItem objects for a specific affiliate.
    Dim dict As Object: Set dict = CreateObject("Scripting.Dictionary")
    Dim itemKey As Variant, item As cForecastItem
    
    For Each itemKey In allItems.Keys
        Set item = allItems.item(itemKey)
        If item.Affiliate = strAffiliate Then
            dict.Add itemKey, item
        End If
    Next itemKey
    
    Set GetItemsForAffiliate = dict
End Function

Public Function GetUniqueCustomersForAffiliate(ByVal strAffiliate As String, ByVal arrDemand As Variant) As Object
' Purpose: Extracts a unique list of customers for a specific affiliate from the demand data array.
    Set GetUniqueCustomersForAffiliate = CreateObject("Scripting.Dictionary")
    Dim rowIndex As Long
    Dim colAffiliate As Long: colAffiliate = g_dsDemand.GetCol(FIELD_AFFILIATE)
    Dim colCustomer As Long: colCustomer = g_dsDemand.GetCol(FIELD_CUSTOMER)
    
    For rowIndex = 2 To UBound(arrDemand, 1)
        If arrDemand(rowIndex, colAffiliate) = strAffiliate Then
            Dim strCustomer As String: strCustomer = arrDemand(rowIndex, colCustomer)
            If Not GetUniqueCustomersForAffiliate.Exists(strCustomer) Then
                GetUniqueCustomersForAffiliate.Add strCustomer, 1
            End If
        End If
    Next rowIndex
End Function

Public Function GetUniqueValues(arrData As Variant, ByVal lngCol As Long) As Object
' Purpose: Extracts a unique list of values from a specific column of an array.
    Dim dict As Object: Set dict = CreateObject("Scripting.Dictionary")
    dict.CompareMode = vbTextCompare
    Dim rowIndex As Long
    For rowIndex = 2 To UBound(arrData, 1)
        If Not IsEmpty(arrData(rowIndex, lngCol)) Then
            If Not dict.Exists(arrData(rowIndex, lngCol)) Then
                dict.Add arrData(rowIndex, lngCol), 1
            End If
        End If
    Next rowIndex
    Set GetUniqueValues = dict
End Function

'================================================================================================
' 4. STRING & DATE HELPERS
'================================================================================================

Public Function SanitizeSheetName(ByVal strName As String) As String
' Purpose: Removes characters that are illegal in Excel sheet names.
    Dim sanitizedString As String: sanitizedString = strName
    sanitizedString = Replace(sanitizedString, "/", "-"): sanitizedString = Replace(sanitizedString, "\", "-")
    sanitizedString = Replace(sanitizedString, "?", ""): sanitizedString = Replace(sanitizedString, "*", "")
    sanitizedString = Replace(sanitizedString, "[", ""): sanitizedString = Replace(sanitizedString, "]", "")
    SanitizeSheetName = Left$(sanitizedString, 31)
End Function

Public Function TryParseDate(ByVal varDate As Variant) As Date
' Purpose: Robustly converts a variant into a valid VBA Date. Returns 0 if conversion fails.
    On Error Resume Next
    Dim dtmTemp As Date
    
    If IsDate(varDate) Then
        dtmTemp = CDate(varDate)
    ElseIf IsNumeric(varDate) Then
        dtmTemp = CDate(varDate)
    ElseIf InStr(1, varDate, "/") > 0 Then
        Dim arrDateParts() As String
        arrDateParts = Split(varDate, "/")
        If UBound(arrDateParts) = 2 Then
            dtmTemp = DateSerial(arrDateParts(2), arrDateParts(1), arrDateParts(0))
        End If
    End If
    
    On Error GoTo 0
    TryParseDate = dtmTemp
End Function
